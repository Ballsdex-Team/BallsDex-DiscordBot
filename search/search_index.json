{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ballsdex - Discord bot","text":"<p>This documentation will contain both documentation and resources on how to use the Ballsdex Discord Bot, as well as resources for self-hosting it.</p> <p>Support our work on Patreon and get exclusive rewards!</p> <p>For $7.50/month, I will be hosting your custom bot on our server, with immediate updates, and a secure and shared admin panel!</p>"},{"location":"#support-us-on-patreon","title":"Support us on Patreon","text":""},{"location":"api/bot/","title":"Bot class","text":""},{"location":"api/bot/#ballsdex.core.bot","title":"ballsdex.core.bot","text":""},{"location":"api/bot/#ballsdex.core.bot.http_counter","title":"http_counter","text":"<pre><code>http_counter = Histogram('discord_http_requests', 'HTTP requests', ['key', 'code'])\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.log","title":"log","text":"<pre><code>log = getLogger('ballsdex.core.bot')\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot","title":"BallsDexBot","text":"<pre><code>BallsDexBot(command_prefix: PrefixType[BallsDexBot], disable_message_content: bool = False, disable_time_check: bool = False, skip_tree_sync: bool = False, dev: bool = False, **options)\n</code></pre> <p>               Bases: <code>AutoShardedBot</code></p> <p>BallsDex Discord bot</p> Source code in <code>ballsdex/core/bot.py</code> <pre><code>def __init__(\n    self,\n    command_prefix: PrefixType[BallsDexBot],\n    disable_message_content: bool = False,\n    disable_time_check: bool = False,\n    skip_tree_sync: bool = False,\n    dev: bool = False,\n    **options,\n):\n    # An explaination for the used intents\n    # guilds: needed for basically anything, the bot needs to know what guilds it has\n    # and accordingly enable automatic spawning in the enabled ones\n    # guild_messages: spawning is based on messages sent, content is not necessary\n    # emojis_and_stickers: DB holds emoji IDs for the balls which are fetched from 3 servers\n    intents = discord.Intents(\n        guilds=True, guild_messages=True, emojis_and_stickers=True, message_content=not disable_message_content\n    )\n    if disable_message_content:\n        log.warning(\"Message content disabled, this will make spam detection harder\")\n\n    if settings.prometheus_enabled:\n        trace = aiohttp.TraceConfig()\n        trace.on_request_start.append(on_request_start)\n        trace.on_request_end.append(on_request_end)\n        options[\"http_trace\"] = trace\n\n    super().__init__(command_prefix, intents=intents, tree_cls=CommandTree, **options)\n    self.tree.disable_time_check = disable_time_check  # type: ignore\n    self.skip_tree_sync = skip_tree_sync\n\n    self.dev = dev\n    self.prometheus_server: PrometheusServer | None = None\n\n    self.tree.error(self.on_application_command_error)\n    self.add_check(owner_check)  # Only owners are able to use text commands\n\n    self._shutdown = 0\n    self.startup_time: datetime | None = None\n    self.application_emojis: dict[int, discord.Emoji] = {}\n    self.blacklist: set[int] = set()\n    self.blacklist_guild: set[int] = set()\n    self.catch_log: set[int] = set()\n    self.command_log: set[int] = set()\n    self.locked_balls = TTLCache(maxsize=99999, ttl=60 * 30)\n\n    self.owner_ids: set[int]\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.application_emojis","title":"application_emojis","text":"<pre><code>application_emojis: dict[int, Emoji] = {}\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.blacklist","title":"blacklist","text":"<pre><code>blacklist: set[int] = set()\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.blacklist_guild","title":"blacklist_guild","text":"<pre><code>blacklist_guild: set[int] = set()\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.catch_log","title":"catch_log","text":"<pre><code>catch_log: set[int] = set()\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.command_log","title":"command_log","text":"<pre><code>command_log: set[int] = set()\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.dev","title":"dev","text":"<pre><code>dev = dev\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.locked_balls","title":"locked_balls","text":"<pre><code>locked_balls = TTLCache(maxsize=99999, ttl=60 * 30)\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.owner_ids","title":"owner_ids","text":"<pre><code>owner_ids: set[int]\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.prometheus_server","title":"prometheus_server","text":"<pre><code>prometheus_server: PrometheusServer | None = None\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.skip_tree_sync","title":"skip_tree_sync","text":"<pre><code>skip_tree_sync = skip_tree_sync\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.startup_time","title":"startup_time","text":"<pre><code>startup_time: datetime | None = None\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.assign_ids_to_app_commands","title":"assign_ids_to_app_commands","text":"<pre><code>assign_ids_to_app_commands(synced_commands: list[AppCommand])\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>def assign_ids_to_app_commands(self, synced_commands: list[app_commands.AppCommand]):\n    for synced_command in synced_commands:\n        bot_command = self.tree.get_command(synced_command.name, type=synced_command.type)\n        if not bot_command:\n            continue\n        bot_command.extras[\"mention\"] = synced_command.mention\n        if isinstance(bot_command, app_commands.Group) and bot_command.commands:\n            self.assign_ids_to_app_groups(\n                bot_command, cast(list[app_commands.AppCommandGroup], synced_command.options)\n            )\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.assign_ids_to_app_groups","title":"assign_ids_to_app_groups","text":"<pre><code>assign_ids_to_app_groups(group: Group, synced_commands: list[AppCommandGroup])\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>def assign_ids_to_app_groups(self, group: app_commands.Group, synced_commands: list[app_commands.AppCommandGroup]):\n    for synced_command in synced_commands:\n        bot_command = group.get_command(synced_command.name)\n        if not bot_command:\n            continue\n        bot_command.extras[\"mention\"] = synced_command.mention\n        if isinstance(bot_command, app_commands.Group) and bot_command.commands:\n            self.assign_ids_to_app_groups(\n                bot_command, cast(list[app_commands.AppCommandGroup], synced_command.options)\n            )\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.blacklist_check","title":"blacklist_check","text":"<pre><code>blacklist_check(interaction: Interaction[Self]) -&gt; bool\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def blacklist_check(self, interaction: discord.Interaction[Self]) -&gt; bool:\n    if interaction.user.id in self.blacklist:\n        if interaction.type != discord.InteractionType.autocomplete:\n            await interaction.response.send_message(\n                \"You are blacklisted from the bot.\\nYou can appeal this blacklist in our support server: {}\".format(\n                    settings.discord_invite\n                ),\n                ephemeral=True,\n            )\n        return False\n    if interaction.guild_id and interaction.guild_id in self.blacklist_guild:\n        if interaction.type != discord.InteractionType.autocomplete:\n            await interaction.response.send_message(\n                \"This server is blacklisted from the bot.\"\n                \"\\nYou can appeal this blacklist in our support server: {}\".format(settings.discord_invite),\n                ephemeral=True,\n            )\n        return False\n    if interaction.command and interaction.user.id in self.command_log:\n        log.info(\n            f\"{interaction.user} ({interaction.user.id}) used \"\n            f'\"{interaction.command.qualified_name}\" in '\n            f\"{interaction.guild} ({interaction.guild_id})\"\n        )\n    return True\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.gateway_healthy","title":"gateway_healthy","text":"<pre><code>gateway_healthy() -&gt; bool\n</code></pre> <p>Check whether or not the gateway proxy is ready and healthy.</p> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def gateway_healthy(self) -&gt; bool:\n    \"\"\"Check whether or not the gateway proxy is ready and healthy.\"\"\"\n    if settings.gateway_url is None:\n        raise RuntimeError(\"This is only available on the production bot instance.\")\n\n    try:\n        base_url = str(discord.gateway.DiscordWebSocket.DEFAULT_GATEWAY).replace(\"ws://\", \"http://\")\n        async with aiohttp.ClientSession() as session:\n            async with session.get(f\"{base_url}/health\", timeout=ClientTimeout(total=10)) as resp:\n                return resp.status == 200\n    except (aiohttp.ClientConnectionError, asyncio.TimeoutError):\n        return False\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.get_emoji","title":"get_emoji","text":"<pre><code>get_emoji(id: int) -&gt; Emoji | None\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>def get_emoji(self, id: int) -&gt; discord.Emoji | None:\n    return self.application_emojis.get(id) or super().get_emoji(id)\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.load_cache","title":"load_cache","text":"<pre><code>load_cache()\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def load_cache(self):\n    table = Table(box=box.SIMPLE)\n    table.add_column(\"Model\", style=\"cyan\")\n    table.add_column(\"Count\", justify=\"right\", style=\"green\")\n\n    self.application_emojis.clear()\n    for emoji in await self.fetch_application_emojis():\n        self.application_emojis[emoji.id] = emoji\n\n    balls.clear()\n    async for ball in Ball.objects.all():\n        balls[ball.pk] = ball\n    table.add_row(settings.collectible_name.title() + \"s\", str(len(balls)))\n\n    regimes.clear()\n    async for regime in Regime.objects.all():\n        regimes[regime.pk] = regime\n    table.add_row(\"Regimes\", str(len(regimes)))\n\n    economies.clear()\n    async for economy in Economy.objects.all():\n        economies[economy.pk] = economy\n    table.add_row(\"Economies\", str(len(economies)))\n\n    specials.clear()\n    async for special in Special.objects.all():\n        specials[special.pk] = special\n    table.add_row(\"Special events\", str(len(specials)))\n\n    self.blacklist = set()\n    async for blacklisted_id in BlacklistedID.objects.all().only(\"discord_id\"):\n        self.blacklist.add(blacklisted_id.discord_id)\n    table.add_row(\"Blacklisted users\", str(len(self.blacklist)))\n\n    self.blacklist_guild = set()\n    async for blacklisted_id in BlacklistedGuild.objects.all().only(\"discord_id\"):\n        self.blacklist_guild.add(blacklisted_id.discord_id)\n    table.add_row(\"Blacklisted guilds\", str(len(self.blacklist_guild)))\n\n    log.info(\"Cache loaded, summary displayed below:\")\n    console = Console()\n    console.print(table)\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.on_application_command_error","title":"on_application_command_error","text":"<pre><code>on_application_command_error(interaction: Interaction[Self], error: AppCommandError)\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def on_application_command_error(\n    self, interaction: discord.Interaction[Self], error: app_commands.AppCommandError\n):\n    async def send(content: str):\n        if interaction.response.is_done():\n            await interaction.followup.send(content, ephemeral=True)\n        else:\n            await interaction.response.send_message(content, ephemeral=True)\n\n    if isinstance(error, app_commands.CommandOnCooldown):\n        await send(f\"This command is on cooldown. Please retry &lt;t:{math.ceil(time.time() + error.retry_after)}:R&gt;.\")\n        return\n\n    if isinstance(error, app_commands.CheckFailure):\n        if isinstance(error, app_commands.BotMissingPermissions):\n            missing_perms = \", \".join(error.missing_permissions)\n            await send(\n                f\"The bot is missing the permissions: `{missing_perms}`.\"\n                \" Give the bot those permissions for the command to work as expected.\"\n            )\n            return\n\n        if isinstance(error, app_commands.MissingPermissions):\n            missing_perms = \", \".join(error.missing_permissions)\n            await send(\n                f\"You are missing the following permissions: `{missing_perms}`.\"\n                \" You need those permissions to run this command.\"\n            )\n            return\n\n        return\n\n    if isinstance(error, app_commands.TransformerError):\n        await send(\"One of the arguments provided cannot be parsed.\")\n        log.debug(\"Failed running converter\", exc_info=error)\n        return\n\n    if isinstance(error, app_commands.CommandInvokeError):\n        assert interaction.command\n\n        if isinstance(error.original, discord.Forbidden):\n            await send(\"The bot does not have the permission to do something.\")\n            # log to know where permissions are lacking\n            log.warning(\n                f\"Missing permissions for app command {interaction.command.qualified_name}\", exc_info=error.original\n            )\n            return\n\n        if isinstance(error.original, discord.InteractionResponded):\n            # most likely an interaction received twice (happens sometimes),\n            # or two instances are running on the same token.\n            log.warning(\n                f\"Tried invoking command {interaction.command.qualified_name}, but the \"\n                \"interaction was already responded to.\",\n                exc_info=error.original,\n            )\n            # still including traceback because it may be a programming error\n\n        log.error(f\"Error in slash command {interaction.command.qualified_name}\", exc_info=error.original)\n        await send(\"An error occured when running the command. Contact support if this persists.\")\n        return\n\n    if isinstance(error, (app_commands.CommandNotFound, app_commands.CommandSignatureMismatch)):\n        await send(\"Commands desynchronized, contact support to fix this.\")\n        log.error(error.args[0])\n\n    await send(\"An error occured when running the command. Contact support if this persists.\")\n    log.error(\"Unknown error in interaction\", exc_info=error)\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.on_command_error","title":"on_command_error","text":"<pre><code>on_command_error(context: Context, exception: CommandError)\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def on_command_error(self, context: commands.Context, exception: commands.errors.CommandError):\n    if isinstance(exception, (commands.CommandNotFound, commands.DisabledCommand)):\n        return\n\n    assert context.command\n    if isinstance(exception, (commands.ConversionError, commands.UserInputError)):\n        # in case we need to know what happened\n        log.debug(\"Silenced command exception\", exc_info=exception)\n        await context.send_help(context.command)\n        return\n\n    if isinstance(exception, commands.MissingRequiredAttachment):\n        await context.send(\"An attachment is missing.\")\n        return\n\n    if isinstance(exception, commands.CheckFailure):\n        if isinstance(exception, commands.BotMissingPermissions):\n            missing_perms = \", \".join(exception.missing_permissions)\n            await context.send(\n                f\"The bot is missing the permissions: `{missing_perms}`.\"\n                \" Give the bot those permissions for the command to work as expected.\"\n            )\n            return\n\n        if isinstance(exception, commands.MissingPermissions):\n            missing_perms = \", \".join(exception.missing_permissions)\n            await context.send(\n                f\"You are missing the following permissions: `{missing_perms}`.\"\n                \" You need those permissions to run this command.\"\n            )\n            return\n\n        return\n\n    if isinstance(exception, commands.CommandInvokeError):\n        await context.send(\"An error occured when running the command. Contact support if this persists.\")\n        log.error(f\"Unknown error in text command {context.command.qualified_name}\", exc_info=exception)\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.on_error","title":"on_error","text":"<pre><code>on_error(event_method: str, /, *args, **kwargs)\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def on_error(self, event_method: str, /, *args, **kwargs):\n    formatted_args = \", \".join((repr(x) for x in args))\n    formatted_kwargs = \" \".join(f\"{x}={y:r}\" for x, y in kwargs.items())\n    log.error(f\"Error in event {event_method}. Args: {formatted_args}. Kwargs: {formatted_kwargs}\", exc_info=True)\n    self.tree.interaction_check\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.on_ready","title":"on_ready","text":"<pre><code>on_ready()\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def on_ready(self):\n    if self.cogs != {}:\n        return  # bot is reconnecting, no need to setup again\n\n    if self.startup_time is None:\n        self.startup_time = datetime.now()\n\n    assert self.user\n    log.info(f\"Successfully logged in as {self.user} ({self.user.id})!\")\n\n    # set bot owners\n    assert self.application\n    if self.application.team:\n        if settings.team_owners:\n            self.owner_ids.update(m.id for m in self.application.team.members)\n        else:\n            self.owner_ids.add(self.application.team.owner_id)  # type: ignore\n    else:\n        self.owner_ids.add(self.application.owner.id)\n    if settings.co_owners:\n        self.owner_ids.update(settings.co_owners)\n    if len(self.owner_ids) &gt; 1:\n        log.info(f\"{len(self.owner_ids)} users are set as bot owner.\")\n    else:\n        log.info(f\"{await self.fetch_user(next(iter(self.owner_ids)))} is the owner of this bot.\")\n\n    await self.load_cache()\n    grammar = \"\" if len(self.blacklist) == 1 else \"s\"\n    if self.blacklist:\n        log.info(f\"{len(self.blacklist)} blacklisted user{grammar}.\")\n\n    log.info(\"Loading packages...\")\n    await self.add_cog(Core(self))\n    if self.dev:\n        await self.add_cog(Dev())\n\n    loaded_packages = []\n    for package in settings.packages:\n        package_name = package.replace(\"ballsdex.packages.\", \"\")\n\n        try:\n            await self.load_extension(package)\n        except Exception:\n            log.error(f\"Failed to load package {package_name}\", exc_info=True)\n        else:\n            loaded_packages.append(package_name)\n    if loaded_packages:\n        log.info(f\"Packages loaded: {', '.join(loaded_packages)}\")\n    else:\n        log.info(\"No package loaded.\")\n\n    if not self.skip_tree_sync:\n        synced_commands = await self.tree.sync()\n        log.info(f\"Synced {len(synced_commands)} commands.\")\n        try:\n            self.assign_ids_to_app_commands(synced_commands)\n        except Exception:\n            log.error(\"Failed to assign IDs to app commands\", exc_info=True)\n    else:\n        log.warning(\"Skipping command synchronization.\")\n\n    if not self.skip_tree_sync and \"ballsdex.packages.admin\" in settings.packages:\n        for guild_id in settings.admin_guild_ids:\n            guild = self.get_guild(guild_id)\n            if not guild:\n                continue\n            synced_commands = await self.tree.sync(guild=guild)\n            grammar = \"\" if len(synced_commands) == 1 else \"s\"\n            log.info(f\"Synced {len(synced_commands)} admin command{grammar} for guild {guild.id}.\")\n\n    if settings.prometheus_enabled:\n        try:\n            await self.start_prometheus_server()\n        except Exception:\n            log.exception(\"Failed to start Prometheus server, stats will be unavailable.\")\n\n    print(f\"\\n    [bold][red]{settings.bot_name} bot[/red] [green]is now operational![/green][/bold]\\n\")\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.setup_hook","title":"setup_hook","text":"<pre><code>setup_hook() -&gt; None\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def setup_hook(self) -&gt; None:\n    await self.tree.set_translator(Translator())\n    log.info(\"Starting up with %s shards...\", self.shard_count)\n    if settings.gateway_url is None:\n        return\n\n    while True:\n        response = await self.gateway_healthy()\n        if response is True:\n            log.info(\"Gateway proxy is ready!\")\n            break\n\n        log.warning(\"Gateway proxy is not ready yet, waiting 30 more seconds...\")\n        await asyncio.sleep(30)\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.BallsDexBot.start_prometheus_server","title":"start_prometheus_server","text":"<pre><code>start_prometheus_server()\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def start_prometheus_server(self):\n    self.prometheus_server = PrometheusServer(self, settings.prometheus_host, settings.prometheus_port)\n    await self.prometheus_server.run()\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.CommandTree","title":"CommandTree","text":"<p>               Bases: <code>CommandTree</code></p>"},{"location":"api/bot/#ballsdex.core.bot.CommandTree.disable_time_check","title":"disable_time_check","text":"<pre><code>disable_time_check: bool = False\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.CommandTree.interaction_check","title":"interaction_check","text":"<pre><code>interaction_check(interaction: Interaction[BallsDexBot]) -&gt; bool\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def interaction_check(self, interaction: discord.Interaction[BallsDexBot], /) -&gt; bool:\n    # checking if the moment we receive this interaction isn't too late already\n    # there is a 3 seconds limit for initial response, taking a little margin into account\n    # https://discord.com/developers/docs/interactions/receiving-and-responding#responding-to-an-interaction\n    if not self.disable_time_check:\n        delta = datetime.now(tz=interaction.created_at.tzinfo) - interaction.created_at\n        if delta.total_seconds() &gt;= 2.8:\n            log.warning(f\"Skipping interaction {interaction.id}, running {delta.total_seconds()}s late.\")\n            return False\n\n    bot = interaction.client\n    if not bot.is_ready():\n        if interaction.type != discord.InteractionType.autocomplete:\n            await interaction.response.send_message(\n                \"The bot is currently starting, please wait for a few minutes... \"\n                f\"({round((len(bot.shards) / bot.shard_count) * 100)}%)\",\n                ephemeral=True,\n            )\n        return False  # wait for all shards to be connected\n    return await bot.blacklist_check(interaction)\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.Translator","title":"Translator","text":"<p>               Bases: <code>Translator</code></p>"},{"location":"api/bot/#ballsdex.core.bot.Translator.translate","title":"translate","text":"<pre><code>translate(string: locale_str, locale: Locale, context: TranslationContextTypes) -&gt; str | None\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def translate(self, string: locale_str, locale: Locale, context: TranslationContextTypes) -&gt; str | None:\n    return (\n        string.message.replace(\"countryballs\", settings.plural_collectible_name)\n        .replace(\"countryball\", settings.collectible_name)\n        .replace(\"/balls\", f\"/{settings.players_group_cog_name}\")\n        .replace(\"BallsDex\", settings.bot_name)\n    )\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.on_request_end","title":"on_request_end","text":"<pre><code>on_request_end(session: ClientSession, trace_ctx: SimpleNamespace, params: TraceRequestEndParams)\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def on_request_end(\n    session: aiohttp.ClientSession, trace_ctx: types.SimpleNamespace, params: aiohttp.TraceRequestEndParams\n):\n    time = session.loop.time() - trace_ctx.start\n\n    # to categorize HTTP calls per path, we need to access the corresponding discord.http.Route\n    # object, which is not available in the context of an aiohttp TraceConfig, therefore it's\n    # obtained by accessing the locals() from the calling function HTTPConfig.request\n    # \"params.url.path\" is not usable as it contains raw IDs and tokens, breaking categories\n    frame = inspect.currentframe()\n    _locals = frame.f_back.f_back.f_back.f_back.f_back.f_locals  # type: ignore\n    if route := _locals.get(\"route\"):\n        route_key = route.key\n    else:\n        # calling function is HTTPConfig.static_login which has no Route object\n        route_key = f\"{params.response.method} {params.url.path}\"\n\n    http_counter.labels(route_key, params.response.status).observe(time)\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.on_request_start","title":"on_request_start","text":"<pre><code>on_request_start(session: ClientSession, trace_ctx: SimpleNamespace, params: TraceRequestStartParams)\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>async def on_request_start(\n    session: aiohttp.ClientSession, trace_ctx: types.SimpleNamespace, params: aiohttp.TraceRequestStartParams\n):\n    # register t1 before sending request\n    trace_ctx.start = session.loop.time()\n</code></pre>"},{"location":"api/bot/#ballsdex.core.bot.owner_check","title":"owner_check","text":"<pre><code>owner_check(ctx: Context[BallsDexBot])\n</code></pre> Source code in <code>ballsdex/core/bot.py</code> <pre><code>def owner_check(ctx: commands.Context[BallsDexBot]):\n    return ctx.bot.is_owner(ctx.author)\n</code></pre>"},{"location":"api/models/","title":"Models","text":""},{"location":"api/models/#bd_models.models","title":"bd_models.models","text":""},{"location":"api/models/#bd_models.models.balls","title":"balls","text":"<pre><code>balls: dict[int, Ball] = {}\n</code></pre>"},{"location":"api/models/#bd_models.models.economies","title":"economies","text":"<pre><code>economies: dict[int, Economy] = {}\n</code></pre>"},{"location":"api/models/#bd_models.models.regimes","title":"regimes","text":"<pre><code>regimes: dict[int, Regime] = {}\n</code></pre>"},{"location":"api/models/#bd_models.models.specials","title":"specials","text":"<pre><code>specials: dict[int, Special] = {}\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball","title":"Ball","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.Ball.attack","title":"attack","text":"<pre><code>attack = IntegerField(help_text='Ball attack stat')\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.cached_economy","title":"cached_economy","text":"<pre><code>cached_economy: Economy | None\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.cached_regime","title":"cached_regime","text":"<pre><code>cached_regime: Regime\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.capacity_description","title":"capacity_description","text":"<pre><code>capacity_description = CharField(max_length=256, help_text=\"Description of the countryball's capacity\")\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.capacity_logic","title":"capacity_logic","text":"<pre><code>capacity_logic = JSONField(help_text='Effect of this capacity', blank=True, default=dict)\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.capacity_name","title":"capacity_name","text":"<pre><code>capacity_name = CharField(max_length=64, help_text=\"Name of the countryball's capacity\")\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.catch_names","title":"catch_names","text":"<pre><code>catch_names = TextField(blank=True, null=True, help_text='Additional possible names for catching this ball, separated by semicolons')\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.collection_card","title":"collection_card","text":"<pre><code>collection_card = ImageField(max_length=200, help_text='Image used when displaying balls')\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.country","title":"country","text":"<pre><code>country = CharField(unique=True, max_length=48, verbose_name='Name')\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.created_at","title":"created_at","text":"<pre><code>created_at = DateTimeField(blank=True, null=True, auto_now_add=True, editable=False)\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.credits","title":"credits","text":"<pre><code>credits = CharField(max_length=64, help_text='Author of the collection artwork')\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.economy","title":"economy","text":"<pre><code>economy = ForeignKey(Economy, on_delete=SET_NULL, blank=True, null=True, help_text='Economical regime of this country')\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.economy_id","title":"economy_id","text":"<pre><code>economy_id: int | None\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.emoji_id","title":"emoji_id","text":"<pre><code>emoji_id = BigIntegerField(help_text='Emoji ID for this ball')\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.enabled","title":"enabled","text":"<pre><code>enabled = BooleanField(help_text='Enables spawning and show in completion', default=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.enabled_objects","title":"enabled_objects","text":"<pre><code>enabled_objects: EnabledManager[Self] = EnabledManager()\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.health","title":"health","text":"<pre><code>health = IntegerField(help_text='Ball health stat')\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.rarity","title":"rarity","text":"<pre><code>rarity = FloatField(help_text='Rarity of this ball')\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.regime","title":"regime","text":"<pre><code>regime = ForeignKey(Regime, on_delete=CASCADE, help_text='Political regime of this country')\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.regime_id","title":"regime_id","text":"<pre><code>regime_id: int\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.short_name","title":"short_name","text":"<pre><code>short_name = CharField(max_length=24, blank=True, null=True, help_text='An alternative shorter name used only when generating the card, if the base name is too long.')\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.tradeable","title":"tradeable","text":"<pre><code>tradeable = BooleanField(help_text='Whether this ball can be traded with others', default=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.tradeable_objects","title":"tradeable_objects","text":"<pre><code>tradeable_objects: TradeableManager[Self] = TradeableManager()\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.translations","title":"translations","text":"<pre><code>translations = TextField(blank=True, null=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.wild_card","title":"wild_card","text":"<pre><code>wild_card = ImageField(max_length=200, help_text='Image used when a new ball spawns in the wild')\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.Ball.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'ball'\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.Meta.verbose_name","title":"verbose_name","text":"<pre><code>verbose_name = collectible_name\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.Meta.verbose_name_plural","title":"verbose_name_plural","text":"<pre><code>verbose_name_plural = plural_collectible_name\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    return self.country\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.collection_image","title":"collection_image","text":"<pre><code>collection_image() -&gt; SafeText\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>@admin.display(description=\"Current collection card\")\ndef collection_image(self) -&gt; SafeText:\n    return image_display(str(self.collection_card))\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.save","title":"save","text":"<pre><code>save(force_insert: bool = False, force_update: bool = False, using: str | None = None, update_fields: Iterable[str] | None = None) -&gt; None\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def save(\n    self,\n    force_insert: bool = False,\n    force_update: bool = False,\n    using: str | None = None,\n    update_fields: Iterable[str] | None = None,\n) -&gt; None:\n    def lower_catch_names(names: str | None) -&gt; str | None:\n        if names:\n            return \";\".join([x.strip() for x in names.split(\";\")]).lower()\n\n    self.catch_names = lower_catch_names(self.catch_names)\n    self.translations = lower_catch_names(self.translations)\n\n    return super().save(force_insert, force_update, using, update_fields)\n</code></pre>"},{"location":"api/models/#bd_models.models.Ball.spawn_image","title":"spawn_image","text":"<pre><code>spawn_image() -&gt; SafeText\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>@admin.display(description=\"Current spawn asset\")\ndef spawn_image(self) -&gt; SafeText:\n    return image_display(str(self.wild_card))\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance","title":"BallInstance","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.BallInstance.attack","title":"attack","text":"<pre><code>attack: int\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.attack_bonus","title":"attack_bonus","text":"<pre><code>attack_bonus = IntegerField(default=0)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.ball","title":"ball","text":"<pre><code>ball = ForeignKey(Ball, on_delete=CASCADE)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.ball_id","title":"ball_id","text":"<pre><code>ball_id: int\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.catch_date","title":"catch_date","text":"<pre><code>catch_date = DateTimeField(auto_now_add=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.countryball","title":"countryball","text":"<pre><code>countryball: Ball\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.extra_data","title":"extra_data","text":"<pre><code>extra_data = JSONField(blank=True, default=dict)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.favorite","title":"favorite","text":"<pre><code>favorite = BooleanField(default=False)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.health","title":"health","text":"<pre><code>health: int\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.health_bonus","title":"health_bonus","text":"<pre><code>health_bonus = IntegerField(default=0)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.is_tradeable","title":"is_tradeable","text":"<pre><code>is_tradeable: bool\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.locked","title":"locked","text":"<pre><code>locked = DateTimeField(null=True, help_text='If the instance was locked for a trade and when', default=None)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.player","title":"player","text":"<pre><code>player = ForeignKey(Player, on_delete=CASCADE, related_name='balls')\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.player_id","title":"player_id","text":"<pre><code>player_id: int\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.server_id","title":"server_id","text":"<pre><code>server_id = BigIntegerField(null=True, help_text='Discord server ID where this ball was caught')\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.spawned_time","title":"spawned_time","text":"<pre><code>spawned_time = DateTimeField(null=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.special","title":"special","text":"<pre><code>special = ForeignKey(Special, on_delete=SET_NULL, null=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.special_card","title":"special_card","text":"<pre><code>special_card: str | None\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.special_id","title":"special_id","text":"<pre><code>special_id: int | None\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.specialcard","title":"specialcard","text":"<pre><code>specialcard: Special | None\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.trade_player","title":"trade_player","text":"<pre><code>trade_player = ForeignKey(Player, on_delete=SET_NULL, related_name='ballinstance_trade_player_set', null=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.trade_player_id","title":"trade_player_id","text":"<pre><code>trade_player_id: int | None\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.tradeable","title":"tradeable","text":"<pre><code>tradeable = BooleanField(default=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.tradeable_objects","title":"tradeable_objects","text":"<pre><code>tradeable_objects: TradeableManager[Self] = TradeableManager()\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.BallInstance.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'ballinstance'\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.Meta.indexes","title":"indexes","text":"<pre><code>indexes = (Index(fields=('ball_id',)), Index(fields=('player_id',)), Index(fields=('special_id',)))\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.Meta.unique_together","title":"unique_together","text":"<pre><code>unique_together = (('player', 'id'),)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.Meta.verbose_name","title":"verbose_name","text":"<pre><code>verbose_name = f'{collectible_name} instance'\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.__getattribute__","title":"__getattribute__","text":"<pre><code>__getattribute__(name: str) -&gt; Any\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def __getattribute__(self, name: str) -&gt; Any:\n    if name == \"ball\":\n        balls = cast(list[Ball], cache.get_or_set(\"balls\", Ball.objects.all(), timeout=30))\n        for ball in balls:\n            if ball.pk == self.ball_id:\n                return ball\n    return super().__getattribute__(name)\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    return self.short_description()\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.admin_description","title":"admin_description","text":"<pre><code>admin_description() -&gt; SafeText\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>@admin.display(description=\"Countryball\")\ndef admin_description(self) -&gt; SafeText:\n    text = str(self)\n    emoji = f'&lt;img src=\"https://cdn.discordapp.com/emojis/{self.ball.emoji_id}.png?size=20\" /&gt;'\n    return mark_safe(f\"{emoji} {text} ATK:{self.attack_bonus:+d}% HP:{self.health_bonus:+d}%\")\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.catch_time","title":"catch_time","text":"<pre><code>catch_time()\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>@admin.display(description=\"Time to catch\")\ndef catch_time(self):\n    if self.spawned_time:\n        return str(self.catch_date - self.spawned_time)\n    return \"-\"\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.description","title":"description","text":"<pre><code>description(*, short: bool = False, include_emoji: bool = False, bot: 'BallsDexBot | None' = None, is_trade: bool = False) -&gt; str\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def description(\n    self,\n    *,\n    short: bool = False,\n    include_emoji: bool = False,\n    bot: \"BallsDexBot | None\" = None,\n    is_trade: bool = False,\n) -&gt; str:\n    text = self.short_description(is_trade=is_trade)\n    if not short:\n        text += f\" ATK:{self.attack_bonus:+d}% HP:{self.health_bonus:+d}%\"\n    if include_emoji:\n        if not bot:\n            raise TypeError(\"You need to provide the bot argument when using with include_emoji=True\")\n        if isinstance(self.countryball, Ball):\n            emoji = bot.get_emoji(self.countryball.emoji_id)\n            if emoji:\n                text = f\"{emoji} {text}\"\n    return text\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.draw_card","title":"draw_card","text":"<pre><code>draw_card() -&gt; BytesIO\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def draw_card(self) -&gt; BytesIO:\n    image, kwargs = draw_card(self)\n    buffer = BytesIO()\n    image.save(buffer, **kwargs)\n    buffer.seek(0)\n    image.close()\n    return buffer\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.is_locked","title":"is_locked","text":"<pre><code>is_locked()\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>async def is_locked(self):\n    await self.arefresh_from_db(fields=[\"locked\"])\n    self.locked\n    return self.locked is not None and (self.locked + timedelta(minutes=30)) &gt; timezone.now()\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.lock_for_trade","title":"lock_for_trade","text":"<pre><code>lock_for_trade()\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>async def lock_for_trade(self):\n    self.locked = timezone.now()\n    await self.asave(update_fields=(\"locked\",))\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.prepare_for_message","title":"prepare_for_message","text":"<pre><code>prepare_for_message(interaction: Interaction['BallsDexBot']) -&gt; tuple[str, File, View]\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>async def prepare_for_message(\n    self, interaction: discord.Interaction[\"BallsDexBot\"]\n) -&gt; tuple[str, discord.File, discord.ui.View]:\n    # message content\n    trade_content = \"\"\n    if self.trade_player:\n        original_player = None\n        # we want to avoid calling fetch_user if possible (heavily rate-limited call)\n        if interaction.guild:\n            try:\n                original_player = await interaction.guild.fetch_member(int(self.trade_player.discord_id))\n            except discord.NotFound:\n                pass\n        elif original_player is None:  # try again if not found in guild\n            try:\n                original_player = await interaction.client.fetch_user(int(self.trade_player.discord_id))\n            except discord.NotFound:\n                pass\n\n        original_player_name = (\n            original_player.name if original_player else f\"user with ID {self.trade_player.discord_id}\"\n        )\n        trade_content = f\"Obtained by trade with {original_player_name}.\\n\"\n    content = (\n        f\"ID: `#{self.pk:0X}`\\n\"\n        f\"Caught on {format_dt(self.catch_date)} ({format_dt(self.catch_date, style='R')}).\\n\"\n        f\"{trade_content}\\n\"\n        f\"ATK: {self.attack} ({self.attack_bonus:+d}%)\\n\"\n        f\"HP: {self.health} ({self.health_bonus:+d}%)\"\n    )\n\n    # draw image\n    with ThreadPoolExecutor() as pool:\n        buffer = await interaction.client.loop.run_in_executor(pool, self.draw_card)\n\n    view = discord.ui.View()\n    return content, discord.File(buffer, \"card.webp\"), view\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.short_description","title":"short_description","text":"<pre><code>short_description(*, is_trade: bool = False) -&gt; str\n</code></pre> <p>Return a short string representation. Similar to str(x) without arguments.</p> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def short_description(self, *, is_trade: bool = False) -&gt; str:\n    \"\"\"\n    Return a short string representation. Similar to str(x) without arguments.\n    \"\"\"\n    text = \"\"\n    if not is_trade and self.locked and self.locked &gt; now() - timedelta(minutes=30):\n        text += \"\ud83d\udd12\"\n    if self.favorite:\n        text += settings.favorited_collectible_emoji\n    if text:\n        text += \" \"\n    if self.specialcard:\n        text += self.specialcard.emoji or \"\"\n    return f\"{text}#{self.pk:0X} {self.countryball.country}\"\n</code></pre>"},{"location":"api/models/#bd_models.models.BallInstance.unlock","title":"unlock","text":"<pre><code>unlock()\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>async def unlock(self):\n    self.locked = None  # type: ignore\n    await self.asave(update_fields=(\"locked\",))\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistHistory","title":"BlacklistHistory","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.BlacklistHistory.action_type","title":"action_type","text":"<pre><code>action_type = CharField(max_length=64, default='blacklist')\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistHistory.date","title":"date","text":"<pre><code>date = DateTimeField(auto_now_add=True, editable=False)\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistHistory.discord_id","title":"discord_id","text":"<pre><code>discord_id = BigIntegerField(help_text='Discord ID')\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistHistory.id_type","title":"id_type","text":"<pre><code>id_type = CharField(max_length=64, default='user')\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistHistory.moderator_id","title":"moderator_id","text":"<pre><code>moderator_id = BigIntegerField(help_text='Discord Moderator ID')\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistHistory.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistHistory.reason","title":"reason","text":"<pre><code>reason = TextField(blank=True, null=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistHistory.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.BlacklistHistory.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'blacklisthistory'\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistHistory.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistHistory.Meta.verbose_name_plural","title":"verbose_name_plural","text":"<pre><code>verbose_name_plural = 'blacklisthistories'\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedGuild","title":"BlacklistedGuild","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.BlacklistedGuild.date","title":"date","text":"<pre><code>date = DateTimeField(blank=True, null=True, auto_now_add=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedGuild.discord_id","title":"discord_id","text":"<pre><code>discord_id = BigIntegerField(unique=True, help_text='Discord Guild ID')\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedGuild.moderator_id","title":"moderator_id","text":"<pre><code>moderator_id = BigIntegerField(blank=True, null=True, default=None)\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedGuild.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedGuild.reason","title":"reason","text":"<pre><code>reason = TextField(blank=True, null=True, default=None)\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedGuild.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.BlacklistedGuild.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'blacklistedguild'\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedGuild.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedID","title":"BlacklistedID","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.BlacklistedID.date","title":"date","text":"<pre><code>date = DateTimeField(blank=True, null=True, auto_now_add=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedID.discord_id","title":"discord_id","text":"<pre><code>discord_id = BigIntegerField(unique=True, help_text='Discord user ID')\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedID.moderator_id","title":"moderator_id","text":"<pre><code>moderator_id = BigIntegerField(blank=True, null=True, default=None)\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedID.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedID.reason","title":"reason","text":"<pre><code>reason = TextField(blank=True, null=True, default=None)\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedID.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.BlacklistedID.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'blacklistedid'\n</code></pre>"},{"location":"api/models/#bd_models.models.BlacklistedID.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.Block","title":"Block","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.Block.date","title":"date","text":"<pre><code>date = DateTimeField(auto_now_add=True, editable=False)\n</code></pre>"},{"location":"api/models/#bd_models.models.Block.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.Block.player1","title":"player1","text":"<pre><code>player1 = ForeignKey(Player, on_delete=CASCADE)\n</code></pre>"},{"location":"api/models/#bd_models.models.Block.player1_id","title":"player1_id","text":"<pre><code>player1_id: int\n</code></pre>"},{"location":"api/models/#bd_models.models.Block.player2","title":"player2","text":"<pre><code>player2 = ForeignKey(Player, on_delete=CASCADE, related_name='block_player2_set')\n</code></pre>"},{"location":"api/models/#bd_models.models.Block.player2_id","title":"player2_id","text":"<pre><code>player2_id: int\n</code></pre>"},{"location":"api/models/#bd_models.models.Block.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.Block.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'block'\n</code></pre>"},{"location":"api/models/#bd_models.models.Block.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.Economy","title":"Economy","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.Economy.icon","title":"icon","text":"<pre><code>icon = ImageField(max_length=200, help_text='512x512 PNG image')\n</code></pre>"},{"location":"api/models/#bd_models.models.Economy.name","title":"name","text":"<pre><code>name = CharField(max_length=64)\n</code></pre>"},{"location":"api/models/#bd_models.models.Economy.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.Economy.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.Economy.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'economy'\n</code></pre>"},{"location":"api/models/#bd_models.models.Economy.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.Economy.Meta.verbose_name_plural","title":"verbose_name_plural","text":"<pre><code>verbose_name_plural = 'economies'\n</code></pre>"},{"location":"api/models/#bd_models.models.Economy.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    return self.name\n</code></pre>"},{"location":"api/models/#bd_models.models.EnabledManager","title":"EnabledManager","text":"<p>               Bases: <code>Manager[T]</code></p>"},{"location":"api/models/#bd_models.models.EnabledManager.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset() -&gt; QuerySet[T]\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def get_queryset(self) -&gt; models.QuerySet[T]:\n    return super().get_queryset().filter(enabled=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.Friendship","title":"Friendship","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.Friendship.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.Friendship.player1","title":"player1","text":"<pre><code>player1 = ForeignKey(Player, on_delete=CASCADE)\n</code></pre>"},{"location":"api/models/#bd_models.models.Friendship.player1_id","title":"player1_id","text":"<pre><code>player1_id: int\n</code></pre>"},{"location":"api/models/#bd_models.models.Friendship.player2","title":"player2","text":"<pre><code>player2 = ForeignKey(Player, on_delete=CASCADE, related_name='friendship_player2_set')\n</code></pre>"},{"location":"api/models/#bd_models.models.Friendship.player2_id","title":"player2_id","text":"<pre><code>player2_id: int\n</code></pre>"},{"location":"api/models/#bd_models.models.Friendship.since","title":"since","text":"<pre><code>since = DateTimeField(auto_now_add=True, editable=False)\n</code></pre>"},{"location":"api/models/#bd_models.models.Friendship.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.Friendship.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'friendship'\n</code></pre>"},{"location":"api/models/#bd_models.models.Friendship.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.GuildConfig","title":"GuildConfig","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.GuildConfig.enabled","title":"enabled","text":"<pre><code>enabled = BooleanField(help_text='Whether the bot will spawn countryballs in this guild', default=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.GuildConfig.guild_id","title":"guild_id","text":"<pre><code>guild_id = BigIntegerField(unique=True, help_text='Discord guild ID')\n</code></pre>"},{"location":"api/models/#bd_models.models.GuildConfig.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.GuildConfig.silent","title":"silent","text":"<pre><code>silent = BooleanField(help_text='Whether the responses of guesses get sent as ephemeral or not', default=False)\n</code></pre>"},{"location":"api/models/#bd_models.models.GuildConfig.spawn_channel","title":"spawn_channel","text":"<pre><code>spawn_channel = BigIntegerField(null=True, help_text='Discord channel ID where balls will spawn')\n</code></pre>"},{"location":"api/models/#bd_models.models.GuildConfig.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.GuildConfig.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'guildconfig'\n</code></pre>"},{"location":"api/models/#bd_models.models.GuildConfig.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.GuildConfig.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    return str(self.guild_id)\n</code></pre>"},{"location":"api/models/#bd_models.models.Manager","title":"Manager","text":"<p>               Bases: <code>from_queryset(QuerySet)</code></p>"},{"location":"api/models/#bd_models.models.Player","title":"Player","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.Player.balls","title":"balls","text":"<pre><code>balls: QuerySet[BallInstance]\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.can_be_mentioned","title":"can_be_mentioned","text":"<pre><code>can_be_mentioned: bool\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.discord_id","title":"discord_id","text":"<pre><code>discord_id = BigIntegerField(unique=True, help_text='Discord user ID')\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.donation_policy","title":"donation_policy","text":"<pre><code>donation_policy = SmallIntegerField(choices=choices, help_text='How you want to handle donations', default=ALWAYS_ACCEPT)\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.extra_data","title":"extra_data","text":"<pre><code>extra_data = JSONField(blank=True, default=dict)\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.friend_policy","title":"friend_policy","text":"<pre><code>friend_policy = SmallIntegerField(choices=choices, help_text='Open or close your friend requests', default=ALLOW)\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.mention_policy","title":"mention_policy","text":"<pre><code>mention_policy = SmallIntegerField(choices=choices, help_text=\"Control the bot's mentions\", default=ALLOW)\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.money","title":"money","text":"<pre><code>money = PositiveBigIntegerField(help_text='Money posessed by the player', default=0)\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.privacy_policy","title":"privacy_policy","text":"<pre><code>privacy_policy = SmallIntegerField(choices=choices, help_text='How you want to handle inventory privacy', default=DENY)\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.trade_cooldown_policy","title":"trade_cooldown_policy","text":"<pre><code>trade_cooldown_policy = SmallIntegerField(choices=choices, help_text='To bypass or not the trade cooldown')\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.Player.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'player'\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    return f\"{'\\N{NO MOBILE PHONES} ' if self.is_blacklisted() else ''}#{self.pk} ({self.discord_id})\"\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.add_money","title":"add_money","text":"<pre><code>add_money(amount: int) -&gt; int\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>async def add_money(self, amount: int) -&gt; int:\n    if amount &lt;= 0:\n        raise ValueError(\"Amount to add must be positive\")\n    self.money += amount\n    await self.asave(update_fields=(\"money\",))\n    return self.money\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.can_afford","title":"can_afford","text":"<pre><code>can_afford(amount: int) -&gt; bool\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def can_afford(self, amount: int) -&gt; bool:\n    return self.money &gt;= amount\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.is_blacklisted","title":"is_blacklisted","text":"<pre><code>is_blacklisted() -&gt; bool\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def is_blacklisted(self) -&gt; bool:\n    # this should only be used for the admin panel\n    if \"startbot\" in sys.argv:\n        return False\n\n    blacklist = cast(\n        list[int],\n        cache.get_or_set(\n            \"blacklist\", BlacklistedID.objects.all().values_list(\"discord_id\", flat=True), timeout=300\n        ),\n    )\n    return self.discord_id in blacklist\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.is_blocked","title":"is_blocked","text":"<pre><code>is_blocked(other_player: 'Player') -&gt; bool\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>async def is_blocked(self, other_player: \"Player\") -&gt; bool:\n    return await Block.objects.filter((Q(player1=self) &amp; Q(player2=other_player))).aexists()\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.is_friend","title":"is_friend","text":"<pre><code>is_friend(other_player: 'Player') -&gt; bool\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>async def is_friend(self, other_player: \"Player\") -&gt; bool:\n    return await Friendship.objects.filter(\n        (Q(player1=self) &amp; Q(player2=other_player)) | (Q(player1=other_player) &amp; Q(player2=self))\n    ).aexists()\n</code></pre>"},{"location":"api/models/#bd_models.models.Player.remove_money","title":"remove_money","text":"<pre><code>remove_money(amount: int) -&gt; None\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>async def remove_money(self, amount: int) -&gt; None:\n    if self.money &lt; amount:\n        raise ValueError(\"Not enough money\")\n    self.money -= amount\n    await self.asave(update_fields=(\"money\",))\n</code></pre>"},{"location":"api/models/#bd_models.models.QuerySet","title":"QuerySet","text":"<p>               Bases: <code>QuerySet[T]</code></p>"},{"location":"api/models/#bd_models.models.QuerySet.aall","title":"aall","text":"<pre><code>aall() -&gt; list[T]\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>async def aall(self) -&gt; list[T]:\n    return [x async for x in super().all()]\n</code></pre>"},{"location":"api/models/#bd_models.models.QuerySet.aget_or_none","title":"aget_or_none","text":"<pre><code>aget_or_none(*args: Any, **kwargs: Any) -&gt; T | None\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>async def aget_or_none(self, *args: Any, **kwargs: Any) -&gt; T | None:\n    try:\n        return await super().aget(*args, **kwargs)\n    except self.model.DoesNotExist:\n        return None\n</code></pre>"},{"location":"api/models/#bd_models.models.QuerySet.get_or_none","title":"get_or_none","text":"<pre><code>get_or_none(*args: Any, **kwargs: Any) -&gt; T | None\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def get_or_none(self, *args: Any, **kwargs: Any) -&gt; T | None:\n    try:\n        return super().get(*args, **kwargs)\n    except self.model.DoesNotExist:\n        return None\n</code></pre>"},{"location":"api/models/#bd_models.models.Regime","title":"Regime","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.Regime.background","title":"background","text":"<pre><code>background = ImageField(max_length=200, help_text='1428x2000 PNG image')\n</code></pre>"},{"location":"api/models/#bd_models.models.Regime.name","title":"name","text":"<pre><code>name = CharField(max_length=64)\n</code></pre>"},{"location":"api/models/#bd_models.models.Regime.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.Regime.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.Regime.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'regime'\n</code></pre>"},{"location":"api/models/#bd_models.models.Regime.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.Regime.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    return self.name\n</code></pre>"},{"location":"api/models/#bd_models.models.Special","title":"Special","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.Special.background","title":"background","text":"<pre><code>background = ImageField(max_length=200, blank=True, null=True, help_text='1428x2000 PNG image')\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.catch_phrase","title":"catch_phrase","text":"<pre><code>catch_phrase = CharField(max_length=128, blank=True, null=True, help_text='Sentence sent in bonus when someone catches a special card')\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.credits","title":"credits","text":"<pre><code>credits = CharField(max_length=64, help_text='Author of the special event artwork', null=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.emoji","title":"emoji","text":"<pre><code>emoji = CharField(max_length=20, blank=True, null=True, help_text='Either a unicode character or a discord emoji ID')\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.enabled_objects","title":"enabled_objects","text":"<pre><code>enabled_objects = SpecialEnabledManager()\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.end_date","title":"end_date","text":"<pre><code>end_date = DateTimeField(blank=True, null=True, help_text='End time of the event. If blank, the event is permanent')\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.hidden","title":"hidden","text":"<pre><code>hidden = BooleanField(help_text='Hides the event from user commands', default=False)\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.name","title":"name","text":"<pre><code>name = CharField(max_length=64)\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.rarity","title":"rarity","text":"<pre><code>rarity = FloatField(help_text='Value between 0 and 1, chances of using this special background.')\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.start_date","title":"start_date","text":"<pre><code>start_date = DateTimeField(blank=True, null=True, help_text='Start time of the event. If blank, starts immediately')\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.tradeable","title":"tradeable","text":"<pre><code>tradeable = BooleanField(help_text='Whether balls of this event can be traded', default=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.Special.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'special'\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.Special.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    return self.name\n</code></pre>"},{"location":"api/models/#bd_models.models.SpecialEnabledManager","title":"SpecialEnabledManager","text":"<p>               Bases: <code>Manager['Special']</code></p>"},{"location":"api/models/#bd_models.models.SpecialEnabledManager.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset() -&gt; QuerySet[Special]\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def get_queryset(self) -&gt; models.QuerySet[Special]:\n    return super().get_queryset().filter(hidden=False)\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade","title":"Trade","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.Trade.date","title":"date","text":"<pre><code>date = DateTimeField(auto_now_add=True, editable=False)\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade.player1","title":"player1","text":"<pre><code>player1 = ForeignKey(Player, on_delete=CASCADE)\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade.player1_id","title":"player1_id","text":"<pre><code>player1_id: int\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade.player1_money","title":"player1_money","text":"<pre><code>player1_money = PositiveBigIntegerField(default=0)\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade.player2","title":"player2","text":"<pre><code>player2 = ForeignKey(Player, on_delete=CASCADE, related_name='trade_player2_set')\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade.player2_id","title":"player2_id","text":"<pre><code>player2_id: int\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade.player2_money","title":"player2_money","text":"<pre><code>player2_money = PositiveBigIntegerField(default=0)\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade.tradeobject_set","title":"tradeobject_set","text":"<pre><code>tradeobject_set: QuerySet[TradeObject]\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.Trade.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'trade'\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade.Meta.indexes","title":"indexes","text":"<pre><code>indexes = (Index(fields=('player1_id',)), Index(fields=('player2_id',)))\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.Trade.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def __str__(self) -&gt; str:\n    return f\"Trade #{self.pk:0X}\"\n</code></pre>"},{"location":"api/models/#bd_models.models.TradeObject","title":"TradeObject","text":"<p>               Bases: <code>Model</code></p>"},{"location":"api/models/#bd_models.models.TradeObject.ballinstance","title":"ballinstance","text":"<pre><code>ballinstance = ForeignKey(BallInstance, on_delete=CASCADE)\n</code></pre>"},{"location":"api/models/#bd_models.models.TradeObject.ballinstance_id","title":"ballinstance_id","text":"<pre><code>ballinstance_id: int\n</code></pre>"},{"location":"api/models/#bd_models.models.TradeObject.objects","title":"objects","text":"<pre><code>objects: Manager[Self] = Manager()\n</code></pre>"},{"location":"api/models/#bd_models.models.TradeObject.player","title":"player","text":"<pre><code>player = ForeignKey(Player, on_delete=CASCADE)\n</code></pre>"},{"location":"api/models/#bd_models.models.TradeObject.player_id","title":"player_id","text":"<pre><code>player_id: int\n</code></pre>"},{"location":"api/models/#bd_models.models.TradeObject.trade","title":"trade","text":"<pre><code>trade = ForeignKey(Trade, on_delete=CASCADE)\n</code></pre>"},{"location":"api/models/#bd_models.models.TradeObject.trade_id","title":"trade_id","text":"<pre><code>trade_id: int\n</code></pre>"},{"location":"api/models/#bd_models.models.TradeObject.Meta","title":"Meta","text":""},{"location":"api/models/#bd_models.models.TradeObject.Meta.db_table","title":"db_table","text":"<pre><code>db_table = 'tradeobject'\n</code></pre>"},{"location":"api/models/#bd_models.models.TradeObject.Meta.indexes","title":"indexes","text":"<pre><code>indexes = (Index(fields=('ballinstance_id',)), Index(fields=('player_id',)), Index(fields=('trade_id',)))\n</code></pre>"},{"location":"api/models/#bd_models.models.TradeObject.Meta.managed","title":"managed","text":"<pre><code>managed = True\n</code></pre>"},{"location":"api/models/#bd_models.models.TradeableManager","title":"TradeableManager","text":"<p>               Bases: <code>Manager[T]</code></p>"},{"location":"api/models/#bd_models.models.TradeableManager.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset() -&gt; QuerySet[T]\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def get_queryset(self) -&gt; models.QuerySet[T]:\n    return super().get_queryset().filter(tradeable=True)\n</code></pre>"},{"location":"api/models/#bd_models.models.image_display","title":"image_display","text":"<pre><code>image_display(image_link: str) -&gt; SafeText\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def image_display(image_link: str) -&gt; SafeText:\n    return mark_safe(f'&lt;img src=\"/media/{transform_media(image_link)}\" width=\"80%\" /&gt;')\n</code></pre>"},{"location":"api/models/#bd_models.models.transform_media","title":"transform_media","text":"<pre><code>transform_media(path: str) -&gt; str\n</code></pre> Source code in <code>admin_panel/bd_models/models.py</code> <pre><code>def transform_media(path: str) -&gt; str:\n    return path.replace(\"/static/uploads/\", \"\").replace(\"/ballsdex/core/image_generator/src/\", \"default/\")\n</code></pre>"},{"location":"api/utils/buttons/","title":"Buttons","text":""},{"location":"api/utils/buttons/#ballsdex.core.utils.buttons","title":"ballsdex.core.utils.buttons","text":""},{"location":"api/utils/buttons/#ballsdex.core.utils.buttons.ConfirmChoiceView","title":"ConfirmChoiceView","text":"<pre><code>ConfirmChoiceView(interaction: Interaction[BallsDexBot], user: User | None = None, accept_message: str = 'Confirmed', cancel_message: str = 'Cancelled')\n</code></pre> <p>               Bases: <code>View</code></p> <p>An utility to prompt the user for confirmation.</p> <p>Parameters:</p> <ul> <li> <code>interaction</code>               (<code>Interaction[BallsDexBot]</code>)           \u2013            <p>The original interaction.</p> </li> <li> <code>user</code>               (<code>User | None</code>, default:                   <code>None</code> )           \u2013            <p>The user you're interacting with. If <code>None</code>, then <code>interaction.user</code> is used.</p> </li> <li> <code>accept_message</code>               (<code>str</code>, default:                   <code>'Confirmed'</code> )           \u2013            <p>The message appended to the message's content if the prompt is accepted.</p> </li> <li> <code>cancel_message</code>               (<code>str</code>, default:                   <code>'Cancelled'</code> )           \u2013            <p>The message appended to the message's content if the prompt is refused.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>value</code>               (<code>bool | None</code>)           \u2013            <p>The user's choice. <code>None</code> if the interaction timed out or didn't finish. Call <code>wait()</code> first.</p> </li> </ul> Example <pre><code>view = ConfirmChoiceView(interaction)\nawait interaction.response.send_message(\"Are you sure?\", view=view)\nawait view.wait()\nif view.value is True:\n    # user accepted\nelif view.value is False:\n    # user denied\nelif view.value is None:\n    # timed out\n</code></pre> Source code in <code>ballsdex/core/utils/buttons.py</code> <pre><code>def __init__(\n    self,\n    interaction: discord.Interaction[\"BallsDexBot\"],\n    user: Optional[discord.User] = None,\n    accept_message: str = \"Confirmed\",\n    cancel_message: str = \"Cancelled\",\n):\n    super().__init__(timeout=90)\n    self.value = None\n    self.interaction = interaction\n    self.user = user or interaction.user\n    self.interaction_response: discord.Interaction[\"BallsDexBot\"]\n    self.accept_message = accept_message\n    self.cancel_message = cancel_message\n</code></pre>"},{"location":"api/utils/db/","title":"Database","text":""},{"location":"api/utils/db/#ballsdex.core.utils.db","title":"ballsdex.core.utils.db","text":""},{"location":"api/utils/db/#ballsdex.core.utils.db.row_count_estimate","title":"row_count_estimate","text":"<pre><code>row_count_estimate(table_name: str, *, analyze: bool = True) -&gt; int\n</code></pre> <p>Estimate the number of rows in a table. This is insanely faster than querying all rows, but the number given is an estimation, not the real value.</p> <p>Source</p> <p>Parameters:</p> <ul> <li> <code>table_name</code>               (<code>str</code>)           \u2013            <p>Name of the table which you want to get the row count of.</p> </li> <li> <code>analyze</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If the returned number is wrong (<code>-1</code>), Postgres hasn't built a cache yet. When this happens, an <code>ANALYSE</code> query is sent to rebuild the cache. Set this parameter to <code>False</code> to prevent this and get a potential invalid result.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>Estimated number of rows</p> </li> </ul> Source code in <code>ballsdex/core/utils/db.py</code> <pre><code>def row_count_estimate(table_name: str, *, analyze: bool = True) -&gt; int:\n    \"\"\"\n    Estimate the number of rows in a table. This is *insanely* faster than querying all rows,\n    but the number given is an estimation, not the real value.\n\n    [Source](https://stackoverflow.com/a/7945274)\n\n    Parameters\n    ----------\n    table_name: str\n        Name of the table which you want to get the row count of.\n    analyze: bool = True\n        If the returned number is wrong (`-1`), Postgres hasn't built a cache yet. When this\n        happens, an `ANALYSE` query is sent to rebuild the cache. Set this parameter to `False`\n        to prevent this and get a potential invalid result.\n\n    Returns\n    -------\n    int\n        Estimated number of rows\n    \"\"\"\n    with connection.cursor() as cursor:\n        # returns as a tuple the number of rows affected (always 1) and the result as a list\n        cursor.execute(f\"SELECT reltuples AS estimate FROM pg_class where relname = '{table_name}';\")\n        record = cursor.fetchone()\n\n        # Record type: https://magicstack.github.io/asyncpg/current/api/index.html#record-objects\n        result = int(record[0])  # type: ignore\n        if result == -1 and analyze is True:\n            # the cache wasn't built yet, let's ask for an analyze query\n            cursor.execute(f\"ANALYZE {table_name}\")\n            return row_count_estimate(table_name, analyze=False)  # prevent recursion error\n\n    return result\n</code></pre>"},{"location":"api/utils/enums/","title":"Enums","text":""},{"location":"api/utils/enums/#ballsdex.core.utils.enums","title":"ballsdex.core.utils.enums","text":""},{"location":"api/utils/enums/#ballsdex.core.utils.enums.DONATION_POLICY_MAP","title":"DONATION_POLICY_MAP","text":"<pre><code>DONATION_POLICY_MAP = {1: 'Accept all donations', 2: 'Approve donations', 3: 'Deny all donations', 4: 'Accept donations from friends only'}\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.FRIEND_POLICY_MAP","title":"FRIEND_POLICY_MAP","text":"<pre><code>FRIEND_POLICY_MAP = {1: 'Allow all friend requests', 2: 'Deny all friend requests'}\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.MENTION_POLICY_MAP","title":"MENTION_POLICY_MAP","text":"<pre><code>MENTION_POLICY_MAP = {1: 'Allow all mentions', 2: 'Deny all mentions'}\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.PRIVATE_POLICY_MAP","title":"PRIVATE_POLICY_MAP","text":"<pre><code>PRIVATE_POLICY_MAP = {1: 'Public', 2: 'Private', 3: 'Mutual Servers', 4: 'Friends'}\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.TRADE_COOLDOWN_POLICY_MAP","title":"TRADE_COOLDOWN_POLICY_MAP","text":"<pre><code>TRADE_COOLDOWN_POLICY_MAP = {1: 'Use 10s acceptance cooldown', 2: 'Bypass acceptance cooldown'}\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.FilteringChoices","title":"FilteringChoices","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.FilteringChoices.non_specials","title":"non_specials","text":"<pre><code>non_specials = 'non_special'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.FilteringChoices.only_specials","title":"only_specials","text":"<pre><code>only_specials = 'special'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.FilteringChoices.self_caught","title":"self_caught","text":"<pre><code>self_caught = 'self_caught'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.FilteringChoices.this_server","title":"this_server","text":"<pre><code>this_server = 'this_server'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.SortingChoices","title":"SortingChoices","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.SortingChoices.alphabetic","title":"alphabetic","text":"<pre><code>alphabetic = 'ball__country'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.SortingChoices.attack","title":"attack","text":"<pre><code>attack = 'attack'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.SortingChoices.attack_bonus","title":"attack_bonus","text":"<pre><code>attack_bonus = '-attack_bonus'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.SortingChoices.catch_date","title":"catch_date","text":"<pre><code>catch_date = '-catch_date'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.SortingChoices.duplicates","title":"duplicates","text":"<pre><code>duplicates = 'manualsort-duplicates'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.SortingChoices.health","title":"health","text":"<pre><code>health = 'health'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.SortingChoices.health_bonus","title":"health_bonus","text":"<pre><code>health_bonus = '-health_bonus'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.SortingChoices.rarity","title":"rarity","text":"<pre><code>rarity = 'ball__rarity'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.SortingChoices.special","title":"special","text":"<pre><code>special = 'special__id'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.SortingChoices.stats_bonus","title":"stats_bonus","text":"<pre><code>stats_bonus = 'stats'\n</code></pre>"},{"location":"api/utils/enums/#ballsdex.core.utils.enums.SortingChoices.total_stats","title":"total_stats","text":"<pre><code>total_stats = 'total_stats'\n</code></pre>"},{"location":"api/utils/formatting/","title":"Formatting","text":""},{"location":"api/utils/formatting/#ballsdex.core.utils.formatting","title":"ballsdex.core.utils.formatting","text":""},{"location":"api/utils/formatting/#ballsdex.core.utils.formatting.escape","title":"escape","text":"<pre><code>escape(text: str, *, mass_mentions: bool = False, formatting: bool = False) -&gt; str\n</code></pre> <p>Get text with all mass mentions or markdown escaped.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The text to be escaped.</p> </li> <li> <code>mass_mentions</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set to <code>True</code> to escape mass mentions in the text.</p> </li> <li> <code>formatting</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Set to <code>True</code> to escape any markdown formatting in the text.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The escaped text.</p> </li> </ul> Source code in <code>ballsdex/core/utils/formatting.py</code> <pre><code>def escape(text: str, *, mass_mentions: bool = False, formatting: bool = False) -&gt; str:\n    \"\"\"\n    Get text with all mass mentions or markdown escaped.\n\n    Parameters\n    ----------\n    text: str\n        The text to be escaped.\n    mass_mentions: bool\n        Set to `True` to escape mass mentions in the text.\n    formatting: bool\n        Set to `True` to escape any markdown formatting in the text.\n\n    Returns\n    -------\n    str\n        The escaped text.\n    \"\"\"\n    if mass_mentions:\n        text = text.replace(\"@everyone\", \"@\\u200beveryone\")\n        text = text.replace(\"@here\", \"@\\u200bhere\")\n    if formatting:\n        text = discord.utils.escape_markdown(text)\n    return text\n</code></pre>"},{"location":"api/utils/formatting/#ballsdex.core.utils.formatting.pagify","title":"pagify","text":"<pre><code>pagify(text: str, delims: Sequence[str] = ['\\n'], *, priority: bool = False, escape_mass_mentions: bool = True, shorten_by: int = 8, page_length: int = 2000) -&gt; Iterator[str]\n</code></pre> <p>Generate multiple pages from the given text.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The content to pagify and send.</p> </li> <li> <code>delims</code>               (<code>Sequence[str]</code>, default:                   <code>['\\n']</code> )           \u2013            <p>Characters where page breaks will occur. If no delimiters are found in a page, the page will break after <code>page_length</code> characters. By default this only contains the newline.</p> </li> </ul> <p>Other Parameters:</p> <ul> <li> <code>priority</code>               (<code>bool</code>)           \u2013            <p>Set to <code>True</code> to choose the page break delimiter based on the order of <code>delims</code>. Otherwise, the page will always break at the last possible delimiter.</p> </li> <li> <code>escape_mass_mentions</code>               (<code>bool</code>)           \u2013            <p>If <code>True</code>, any mass mentions (here or everyone) will be silenced.</p> </li> <li> <code>shorten_by</code>               (<code>int</code>)           \u2013            <p>How much to shorten each page by. Defaults to 8.</p> </li> <li> <code>page_length</code>               (<code>int</code>)           \u2013            <p>The maximum length of each page. Defaults to 2000.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>str</code>           \u2013            <p>Pages of the given text.</p> </li> </ul> Source code in <code>ballsdex/core/utils/formatting.py</code> <pre><code>def pagify(\n    text: str,\n    delims: Sequence[str] = [\"\\n\"],\n    *,\n    priority: bool = False,\n    escape_mass_mentions: bool = True,\n    shorten_by: int = 8,\n    page_length: int = 2000,\n) -&gt; Iterator[str]:\n    \"\"\"\n    Generate multiple pages from the given text.\n\n    Parameters\n    ----------\n    text: str\n        The content to pagify and send.\n    delims: Sequence[str]\n        Characters where page breaks will occur. If no delimiters are found\n        in a page, the page will break after `page_length` characters.\n        By default this only contains the newline.\n\n    Other Parameters\n    ----------------\n    priority: bool\n        Set to `True` to choose the page break delimiter based on the\n        order of `delims`. Otherwise, the page will always break at the\n        last possible delimiter.\n    escape_mass_mentions: bool\n        If `True`, any mass mentions (here or everyone) will be\n        silenced.\n    shorten_by: int\n        How much to shorten each page by. Defaults to 8.\n    page_length: int\n        The maximum length of each page. Defaults to 2000.\n\n    Yields\n    ------\n    str\n        Pages of the given text.\n    \"\"\"\n    in_text = text\n    page_length -= shorten_by\n    while len(in_text) &gt; page_length:\n        this_page_len = page_length\n        if escape_mass_mentions:\n            this_page_len -= in_text.count(\"@here\", 0, page_length) + in_text.count(\"@everyone\", 0, page_length)\n        closest_delim = (in_text.rfind(d, 1, this_page_len) for d in delims)\n        if priority:\n            closest_delim = next((x for x in closest_delim if x &gt; 0), -1)\n        else:\n            closest_delim = max(closest_delim)\n        closest_delim = closest_delim if closest_delim != -1 else this_page_len\n        if escape_mass_mentions:\n            to_send = escape(in_text[:closest_delim], mass_mentions=True)\n        else:\n            to_send = in_text[:closest_delim]\n        if len(to_send.strip()) &gt; 0:\n            yield to_send\n        in_text = in_text[closest_delim:]\n\n    if len(in_text.strip()) &gt; 0:\n        if escape_mass_mentions:\n            yield escape(in_text, mass_mentions=True)\n        else:\n            yield in_text\n</code></pre>"},{"location":"api/utils/logging/","title":"Logging","text":""},{"location":"api/utils/logging/#ballsdex.core.utils.logging","title":"ballsdex.core.utils.logging","text":""},{"location":"api/utils/logging/#ballsdex.core.utils.logging.log_action","title":"log_action","text":"<pre><code>log_action(message: str, bot: BallsDexBot, console_log: bool = False)\n</code></pre> <p>Log an action to be sent in the channel configured by <code>log-channel</code> in <code>config.yml</code>. If no channel was configured, this does nothing.</p> <p>Parameters:</p> <ul> <li> <code>message</code>               (<code>str</code>)           \u2013            <p>The message to log.</p> </li> <li> <code>bot</code>               (<code>BallsDexBot</code>)           \u2013            <p>The bot class, needed to send the message.</p> </li> <li> <code>console_log</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to also log the message in the console. Defaults to <code>False</code>.</p> </li> </ul> Source code in <code>ballsdex/core/utils/logging.py</code> <pre><code>async def log_action(message: str, bot: BallsDexBot, console_log: bool = False):\n    \"\"\"\n    Log an action to be sent in the channel configured by `log-channel` in `config.yml`.\n    If no channel was configured, this does nothing.\n\n    Parameters\n    ----------\n    message: str\n        The message to log.\n    bot: BallsDexBot\n        The bot class, needed to send the message.\n    console_log: bool\n        Whether to also log the message in the console. Defaults to `False`.\n    \"\"\"\n    if settings.log_channel:\n        channel = bot.get_channel(settings.log_channel)\n        if not channel:\n            log.warning(f\"Channel {settings.log_channel} not found\")\n            return\n        if not isinstance(channel, discord.TextChannel):\n            log.warning(f\"Channel {channel.name} is not a text channel\")  # type: ignore\n            return\n        await channel.send(message)\n    if console_log:\n        log.info(message)\n</code></pre>"},{"location":"api/utils/menus/","title":"Menus and paginators","text":"<p>Failure</p> <p>Wait for this PR to be merged</p>"},{"location":"api/utils/sorting/","title":"Sorting","text":""},{"location":"api/utils/sorting/#ballsdex.core.utils.sorting","title":"ballsdex.core.utils.sorting","text":""},{"location":"api/utils/sorting/#ballsdex.core.utils.sorting.filter_balls","title":"filter_balls","text":"<pre><code>filter_balls(filter: FilteringChoices, queryset: QuerySet[BallInstance], guild_id: int | None = None) -&gt; QuerySet[BallInstance]\n</code></pre> <p>Edit a list of ball instances in place to apply the selected filtering options.</p> <p>Parameters:</p> <ul> <li> <code>filter</code>               (<code>FilteringChoices</code>)           \u2013            <p>One of the supported filtering methods</p> </li> <li> <code>queryset</code>               (<code>QuerySet[BallInstance]</code>)           \u2013            <p>A ballinstance queryset.</p> </li> <li> <code>guild_id</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The ID of the server to filter by. Only used for the <code>this_server</code> filter. If not provided, this filter will be ignored.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>QuerySet[BallInstance]</code>           \u2013            <p>The modified query applying the filtering.</p> </li> </ul> Source code in <code>ballsdex/core/utils/sorting.py</code> <pre><code>def filter_balls(\n    filter: FilteringChoices, queryset: \"QuerySet[BallInstance]\", guild_id: int | None = None\n) -&gt; \"QuerySet[BallInstance]\":\n    \"\"\"\n    Edit a list of ball instances in place to apply the selected filtering options.\n\n    Parameters\n    ----------\n    filter: FilteringChoices\n        One of the supported filtering methods\n    queryset: QuerySet[BallInstance]\n        A ballinstance queryset.\n    guild_id: int | None\n        The ID of the server to filter by. Only used for the ``this_server`` filter.\n        If not provided, this filter will be ignored.\n\n    Returns\n    -------\n    QuerySet[BallInstance]\n        The modified query applying the filtering.\n    \"\"\"\n    if filter == FilteringChoices.only_specials:\n        return queryset.exclude(special=None)\n    elif filter == FilteringChoices.non_specials:\n        return queryset.filter(special=None)\n    elif filter == FilteringChoices.self_caught:\n        return queryset.filter(trade_player=None)\n    elif filter == FilteringChoices.this_server and guild_id is not None:\n        return queryset.filter(server_id=guild_id)\n    else:\n        return queryset\n</code></pre>"},{"location":"api/utils/sorting/#ballsdex.core.utils.sorting.sort_balls","title":"sort_balls","text":"<pre><code>sort_balls(sort: SortingChoices, queryset: QS) -&gt; QS\n</code></pre> <p>Edit a queryset in place to apply the selected sorting options. You can call this function multiple times with the same queryset to have multiple sort methods.</p> <p>Parameters:</p> <ul> <li> <code>sort</code>               (<code>SortingChoices</code>)           \u2013            <p>One of the supported sorting methods</p> </li> <li> <code>queryset</code>               (<code>QS</code>)           \u2013            <p>An existing queryset of ball instances. This can be obtained with, for example, <code>BallInstance.all()</code> or <code>BallInstance.filter(player=x)</code> without awaiting the result!</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>QuerySet[BallInstance]</code>           \u2013            <p>The same queryset modified to apply the ordering. Await it to obtain the result.</p> </li> </ul> Source code in <code>ballsdex/core/utils/sorting.py</code> <pre><code>def sort_balls[QS: QuerySet[BallInstance]](sort: SortingChoices, queryset: QS) -&gt; QS:\n    \"\"\"\n    Edit a queryset in place to apply the selected sorting options. You can call this function\n    multiple times with the same queryset to have multiple sort methods.\n\n    Parameters\n    ----------\n    sort: SortingChoices\n        One of the supported sorting methods\n    queryset: QuerySet[BallInstance]\n        An existing queryset of ball instances. This can be obtained with, for example,\n        ``BallInstance.all()`` or ``BallInstance.filter(player=x)``\n        **without awaiting the result!**\n\n    Returns\n    -------\n    QuerySet[BallInstance]\n        The same queryset modified to apply the ordering. Await it to obtain the result.\n    \"\"\"\n    if sort == SortingChoices.duplicates:\n        return queryset.annotate(count=RawSQL(\"COUNT(*) OVER (PARTITION BY ball_id)\", ())).order_by(\"-count\")\n    elif sort == SortingChoices.stats_bonus:\n        return queryset.annotate(stats_bonus=F(\"health_bonus\") + F(\"attack_bonus\")).order_by(\"-stats_bonus\")\n    elif sort == SortingChoices.health or sort == SortingChoices.attack:\n        # Use the sorting name as the annotation key to avoid issues when this function\n        # is called multiple times. Using the same annotation name twice will error.\n        return queryset.annotate(\n            **{f\"{sort.value}_sort\": F(f\"{sort.value}_bonus\") + F(f\"ball__{sort.value}\")}\n        ).order_by(f\"-{sort.value}_sort\")\n    elif sort == SortingChoices.total_stats:\n        return (\n            queryset.select_related(\"ball\")\n            .annotate(stats=RawSQL(\"ball.health + ball.attack :: BIGINT\", ()))\n            .order_by(\"-stats\")\n        )\n    elif sort == SortingChoices.rarity:\n        return queryset.order_by(sort.value, \"ball__country\")\n    else:\n        return queryset.order_by(sort.value)\n</code></pre>"},{"location":"api/utils/transformers/","title":"Transformers","text":""},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers","title":"ballsdex.core.utils.transformers","text":"<p>This file contains discord.py transformers used to provide autocompletion, parsing and validation for various Ballsdex models.</p>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.T","title":"T","text":"<pre><code>T = TypeVar('T', bound=Model)\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.ModelTransformer","title":"ModelTransformer","text":"<p>               Bases: <code>Transformer</code>, <code>Generic[T]</code></p> <p>Base abstract class for autocompletion from on Tortoise models</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name to qualify the object being listed</p> </li> <li> <code>model</code>               (<code>T</code>)           \u2013            <p>The Tortoise model associated to the class derivation</p> </li> </ul>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.ModelTransformer.get_from_pk","title":"get_from_pk","text":"<pre><code>get_from_pk(value: int) -&gt; T\n</code></pre> <p>Return a Tortoise model instance from a primary key.</p> <p>Raises:</p> <ul> <li> <code>KeyError | DoesNotExist</code>             \u2013            <p>Entry does not exist</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_from_pk(self, value: int) -&gt; T:\n    \"\"\"\n    Return a Tortoise model instance from a primary key.\n\n    Raises\n    ------\n    KeyError | django.db.models.Model.DoesNotExist\n        Entry does not exist\n    \"\"\"\n    return await self.model.objects.aget(pk=value)\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.ModelTransformer.get_options","title":"get_options","text":"<pre><code>get_options(interaction: Interaction[BallsDexBot], value: str) -&gt; list[Choice[int]]\n</code></pre> <p>Generate the list of options for autocompletion</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_options(\n    self, interaction: discord.Interaction[\"BallsDexBot\"], value: str\n) -&gt; list[app_commands.Choice[int]]:\n    \"\"\"\n    Generate the list of options for autocompletion\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.ModelTransformer.key","title":"key","text":"<pre><code>key(model: T) -&gt; str\n</code></pre> <p>Return a string used for searching while sending autocompletion suggestions.</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def key(self, model: T) -&gt; str:\n    \"\"\"\n    Return a string used for searching while sending autocompletion suggestions.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.ModelTransformer.validate","title":"validate","text":"<pre><code>validate(interaction: Interaction[BallsDexBot], item: T)\n</code></pre> <p>A function to validate the fetched item before calling back the command.</p> <p>Raises:</p> <ul> <li> <code>ValidationError</code>             \u2013            <p>Raised if the item does not pass validation with the message to be displayed</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def validate(self, interaction: discord.Interaction[\"BallsDexBot\"], item: T):\n    \"\"\"\n    A function to validate the fetched item before calling back the command.\n\n    Raises\n    ------\n    ValidationError\n        Raised if the item does not pass validation with the message to be displayed\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.BallInstanceTransformer","title":"BallInstanceTransformer","text":"<p>               Bases: <code>ModelTransformer[BallInstance]</code></p>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.BallInstanceTransformer.key","title":"key","text":"<pre><code>key(model: BallInstance) -&gt; str\n</code></pre> <p>Return a string used for searching while sending autocompletion suggestions.</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def key(self, model: T) -&gt; str:\n    \"\"\"\n    Return a string used for searching while sending autocompletion suggestions.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.TTLModelTransformer","title":"TTLModelTransformer","text":"<pre><code>TTLModelTransformer()\n</code></pre> <p>               Bases: <code>ModelTransformer[T]</code></p> <p>Base class for simple Tortoise model autocompletion with TTL cache.</p> <p>This is used in most cases except for BallInstance which requires special handling depending on the interaction passed.</p> <p>Attributes:</p> <ul> <li> <code>ttl</code>               (<code>float</code>)           \u2013            <p>Delay in seconds for <code>items</code> to live until refreshed with <code>load_items</code>, defaults to 300</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def __init__(self):\n    self.items: dict[int, T] = {}\n    self.search_map: dict[T, str] = {}\n    self.last_refresh: float = 0\n    log.debug(f\"Inited transformer for {self.name}\")\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.TTLModelTransformer.get_from_pk","title":"get_from_pk","text":"<pre><code>get_from_pk(value: int) -&gt; T\n</code></pre> <p>Return a Tortoise model instance from a primary key.</p> <p>Raises:</p> <ul> <li> <code>KeyError | DoesNotExist</code>             \u2013            <p>Entry does not exist</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_from_pk(self, value: int) -&gt; T:\n    \"\"\"\n    Return a Tortoise model instance from a primary key.\n\n    Raises\n    ------\n    KeyError | django.db.models.Model.DoesNotExist\n        Entry does not exist\n    \"\"\"\n    return await self.model.objects.aget(pk=value)\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.TTLModelTransformer.key","title":"key","text":"<pre><code>key(model: T) -&gt; str\n</code></pre> <p>Return a string used for searching while sending autocompletion suggestions.</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def key(self, model: T) -&gt; str:\n    \"\"\"\n    Return a string used for searching while sending autocompletion suggestions.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.TTLModelTransformer.load_items","title":"load_items","text":"<pre><code>load_items() -&gt; Iterable[T]\n</code></pre> <p>Query values to fill <code>items</code> with.</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def load_items(self) -&gt; Iterable[T]:\n    \"\"\"\n    Query values to fill `items` with.\n    \"\"\"\n    return [x async for x in self.model.objects.all()]\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.TTLModelTransformer.validate","title":"validate","text":"<pre><code>validate(interaction: Interaction[BallsDexBot], item: T)\n</code></pre> <p>A function to validate the fetched item before calling back the command.</p> <p>Raises:</p> <ul> <li> <code>ValidationError</code>             \u2013            <p>Raised if the item does not pass validation with the message to be displayed</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def validate(self, interaction: discord.Interaction[\"BallsDexBot\"], item: T):\n    \"\"\"\n    A function to validate the fetched item before calling back the command.\n\n    Raises\n    ------\n    ValidationError\n        Raised if the item does not pass validation with the message to be displayed\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.BallTransformer","title":"BallTransformer","text":"<pre><code>BallTransformer()\n</code></pre> <p>               Bases: <code>TTLModelTransformer[Ball]</code></p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def __init__(self):\n    self.items: dict[int, T] = {}\n    self.search_map: dict[T, str] = {}\n    self.last_refresh: float = 0\n    log.debug(f\"Inited transformer for {self.name}\")\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.BallTransformer.get_from_pk","title":"get_from_pk","text":"<pre><code>get_from_pk(value: int) -&gt; T\n</code></pre> <p>Return a Tortoise model instance from a primary key.</p> <p>Raises:</p> <ul> <li> <code>KeyError | DoesNotExist</code>             \u2013            <p>Entry does not exist</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_from_pk(self, value: int) -&gt; T:\n    \"\"\"\n    Return a Tortoise model instance from a primary key.\n\n    Raises\n    ------\n    KeyError | django.db.models.Model.DoesNotExist\n        Entry does not exist\n    \"\"\"\n    return await self.model.objects.aget(pk=value)\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.BallTransformer.get_options","title":"get_options","text":"<pre><code>get_options(interaction: Interaction[BallsDexBot], value: str) -&gt; list[Choice[int]]\n</code></pre> <p>Generate the list of options for autocompletion</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_options(\n    self, interaction: discord.Interaction[\"BallsDexBot\"], value: str\n) -&gt; list[app_commands.Choice[int]]:\n    \"\"\"\n    Generate the list of options for autocompletion\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.BallTransformer.validate","title":"validate","text":"<pre><code>validate(interaction: Interaction[BallsDexBot], item: T)\n</code></pre> <p>A function to validate the fetched item before calling back the command.</p> <p>Raises:</p> <ul> <li> <code>ValidationError</code>             \u2013            <p>Raised if the item does not pass validation with the message to be displayed</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def validate(self, interaction: discord.Interaction[\"BallsDexBot\"], item: T):\n    \"\"\"\n    A function to validate the fetched item before calling back the command.\n\n    Raises\n    ------\n    ValidationError\n        Raised if the item does not pass validation with the message to be displayed\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.BallEnabledTransformer","title":"BallEnabledTransformer","text":"<pre><code>BallEnabledTransformer()\n</code></pre> <p>               Bases: <code>BallTransformer</code></p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def __init__(self):\n    self.items: dict[int, T] = {}\n    self.search_map: dict[T, str] = {}\n    self.last_refresh: float = 0\n    log.debug(f\"Inited transformer for {self.name}\")\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.BallEnabledTransformer.get_from_pk","title":"get_from_pk","text":"<pre><code>get_from_pk(value: int) -&gt; T\n</code></pre> <p>Return a Tortoise model instance from a primary key.</p> <p>Raises:</p> <ul> <li> <code>KeyError | DoesNotExist</code>             \u2013            <p>Entry does not exist</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_from_pk(self, value: int) -&gt; T:\n    \"\"\"\n    Return a Tortoise model instance from a primary key.\n\n    Raises\n    ------\n    KeyError | django.db.models.Model.DoesNotExist\n        Entry does not exist\n    \"\"\"\n    return await self.model.objects.aget(pk=value)\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.BallEnabledTransformer.get_options","title":"get_options","text":"<pre><code>get_options(interaction: Interaction[BallsDexBot], value: str) -&gt; list[Choice[int]]\n</code></pre> <p>Generate the list of options for autocompletion</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_options(\n    self, interaction: discord.Interaction[\"BallsDexBot\"], value: str\n) -&gt; list[app_commands.Choice[int]]:\n    \"\"\"\n    Generate the list of options for autocompletion\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.BallEnabledTransformer.key","title":"key","text":"<pre><code>key(model: T) -&gt; str\n</code></pre> <p>Return a string used for searching while sending autocompletion suggestions.</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def key(self, model: T) -&gt; str:\n    \"\"\"\n    Return a string used for searching while sending autocompletion suggestions.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.BallEnabledTransformer.validate","title":"validate","text":"<pre><code>validate(interaction: Interaction[BallsDexBot], item: T)\n</code></pre> <p>A function to validate the fetched item before calling back the command.</p> <p>Raises:</p> <ul> <li> <code>ValidationError</code>             \u2013            <p>Raised if the item does not pass validation with the message to be displayed</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def validate(self, interaction: discord.Interaction[\"BallsDexBot\"], item: T):\n    \"\"\"\n    A function to validate the fetched item before calling back the command.\n\n    Raises\n    ------\n    ValidationError\n        Raised if the item does not pass validation with the message to be displayed\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.SpecialTransformer","title":"SpecialTransformer","text":"<pre><code>SpecialTransformer()\n</code></pre> <p>               Bases: <code>TTLModelTransformer[Special]</code></p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def __init__(self):\n    self.items: dict[int, T] = {}\n    self.search_map: dict[T, str] = {}\n    self.last_refresh: float = 0\n    log.debug(f\"Inited transformer for {self.name}\")\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.SpecialTransformer.get_from_pk","title":"get_from_pk","text":"<pre><code>get_from_pk(value: int) -&gt; T\n</code></pre> <p>Return a Tortoise model instance from a primary key.</p> <p>Raises:</p> <ul> <li> <code>KeyError | DoesNotExist</code>             \u2013            <p>Entry does not exist</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_from_pk(self, value: int) -&gt; T:\n    \"\"\"\n    Return a Tortoise model instance from a primary key.\n\n    Raises\n    ------\n    KeyError | django.db.models.Model.DoesNotExist\n        Entry does not exist\n    \"\"\"\n    return await self.model.objects.aget(pk=value)\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.SpecialTransformer.get_options","title":"get_options","text":"<pre><code>get_options(interaction: Interaction[BallsDexBot], value: str) -&gt; list[Choice[int]]\n</code></pre> <p>Generate the list of options for autocompletion</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_options(\n    self, interaction: discord.Interaction[\"BallsDexBot\"], value: str\n) -&gt; list[app_commands.Choice[int]]:\n    \"\"\"\n    Generate the list of options for autocompletion\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.SpecialTransformer.load_items","title":"load_items","text":"<pre><code>load_items() -&gt; Iterable[T]\n</code></pre> <p>Query values to fill <code>items</code> with.</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def load_items(self) -&gt; Iterable[T]:\n    \"\"\"\n    Query values to fill `items` with.\n    \"\"\"\n    return [x async for x in self.model.objects.all()]\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.SpecialTransformer.validate","title":"validate","text":"<pre><code>validate(interaction: Interaction[BallsDexBot], item: T)\n</code></pre> <p>A function to validate the fetched item before calling back the command.</p> <p>Raises:</p> <ul> <li> <code>ValidationError</code>             \u2013            <p>Raised if the item does not pass validation with the message to be displayed</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def validate(self, interaction: discord.Interaction[\"BallsDexBot\"], item: T):\n    \"\"\"\n    A function to validate the fetched item before calling back the command.\n\n    Raises\n    ------\n    ValidationError\n        Raised if the item does not pass validation with the message to be displayed\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.SpecialEnabledTransformer","title":"SpecialEnabledTransformer","text":"<pre><code>SpecialEnabledTransformer()\n</code></pre> <p>               Bases: <code>SpecialTransformer</code></p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def __init__(self):\n    self.items: dict[int, T] = {}\n    self.search_map: dict[T, str] = {}\n    self.last_refresh: float = 0\n    log.debug(f\"Inited transformer for {self.name}\")\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.SpecialEnabledTransformer.get_from_pk","title":"get_from_pk","text":"<pre><code>get_from_pk(value: int) -&gt; T\n</code></pre> <p>Return a Tortoise model instance from a primary key.</p> <p>Raises:</p> <ul> <li> <code>KeyError | DoesNotExist</code>             \u2013            <p>Entry does not exist</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_from_pk(self, value: int) -&gt; T:\n    \"\"\"\n    Return a Tortoise model instance from a primary key.\n\n    Raises\n    ------\n    KeyError | django.db.models.Model.DoesNotExist\n        Entry does not exist\n    \"\"\"\n    return await self.model.objects.aget(pk=value)\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.SpecialEnabledTransformer.get_options","title":"get_options","text":"<pre><code>get_options(interaction: Interaction[BallsDexBot], value: str) -&gt; list[Choice[int]]\n</code></pre> <p>Generate the list of options for autocompletion</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_options(\n    self, interaction: discord.Interaction[\"BallsDexBot\"], value: str\n) -&gt; list[app_commands.Choice[int]]:\n    \"\"\"\n    Generate the list of options for autocompletion\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.SpecialEnabledTransformer.key","title":"key","text":"<pre><code>key(model: T) -&gt; str\n</code></pre> <p>Return a string used for searching while sending autocompletion suggestions.</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def key(self, model: T) -&gt; str:\n    \"\"\"\n    Return a string used for searching while sending autocompletion suggestions.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.SpecialEnabledTransformer.validate","title":"validate","text":"<pre><code>validate(interaction: Interaction[BallsDexBot], item: T)\n</code></pre> <p>A function to validate the fetched item before calling back the command.</p> <p>Raises:</p> <ul> <li> <code>ValidationError</code>             \u2013            <p>Raised if the item does not pass validation with the message to be displayed</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def validate(self, interaction: discord.Interaction[\"BallsDexBot\"], item: T):\n    \"\"\"\n    A function to validate the fetched item before calling back the command.\n\n    Raises\n    ------\n    ValidationError\n        Raised if the item does not pass validation with the message to be displayed\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.RegimeTransformer","title":"RegimeTransformer","text":"<pre><code>RegimeTransformer()\n</code></pre> <p>               Bases: <code>TTLModelTransformer[Regime]</code></p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def __init__(self):\n    self.items: dict[int, T] = {}\n    self.search_map: dict[T, str] = {}\n    self.last_refresh: float = 0\n    log.debug(f\"Inited transformer for {self.name}\")\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.RegimeTransformer.get_from_pk","title":"get_from_pk","text":"<pre><code>get_from_pk(value: int) -&gt; T\n</code></pre> <p>Return a Tortoise model instance from a primary key.</p> <p>Raises:</p> <ul> <li> <code>KeyError | DoesNotExist</code>             \u2013            <p>Entry does not exist</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_from_pk(self, value: int) -&gt; T:\n    \"\"\"\n    Return a Tortoise model instance from a primary key.\n\n    Raises\n    ------\n    KeyError | django.db.models.Model.DoesNotExist\n        Entry does not exist\n    \"\"\"\n    return await self.model.objects.aget(pk=value)\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.RegimeTransformer.get_options","title":"get_options","text":"<pre><code>get_options(interaction: Interaction[BallsDexBot], value: str) -&gt; list[Choice[int]]\n</code></pre> <p>Generate the list of options for autocompletion</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_options(\n    self, interaction: discord.Interaction[\"BallsDexBot\"], value: str\n) -&gt; list[app_commands.Choice[int]]:\n    \"\"\"\n    Generate the list of options for autocompletion\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.RegimeTransformer.validate","title":"validate","text":"<pre><code>validate(interaction: Interaction[BallsDexBot], item: T)\n</code></pre> <p>A function to validate the fetched item before calling back the command.</p> <p>Raises:</p> <ul> <li> <code>ValidationError</code>             \u2013            <p>Raised if the item does not pass validation with the message to be displayed</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def validate(self, interaction: discord.Interaction[\"BallsDexBot\"], item: T):\n    \"\"\"\n    A function to validate the fetched item before calling back the command.\n\n    Raises\n    ------\n    ValidationError\n        Raised if the item does not pass validation with the message to be displayed\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.EconomyTransformer","title":"EconomyTransformer","text":"<pre><code>EconomyTransformer()\n</code></pre> <p>               Bases: <code>TTLModelTransformer[Economy]</code></p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def __init__(self):\n    self.items: dict[int, T] = {}\n    self.search_map: dict[T, str] = {}\n    self.last_refresh: float = 0\n    log.debug(f\"Inited transformer for {self.name}\")\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.EconomyTransformer.get_from_pk","title":"get_from_pk","text":"<pre><code>get_from_pk(value: int) -&gt; T\n</code></pre> <p>Return a Tortoise model instance from a primary key.</p> <p>Raises:</p> <ul> <li> <code>KeyError | DoesNotExist</code>             \u2013            <p>Entry does not exist</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_from_pk(self, value: int) -&gt; T:\n    \"\"\"\n    Return a Tortoise model instance from a primary key.\n\n    Raises\n    ------\n    KeyError | django.db.models.Model.DoesNotExist\n        Entry does not exist\n    \"\"\"\n    return await self.model.objects.aget(pk=value)\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.EconomyTransformer.get_options","title":"get_options","text":"<pre><code>get_options(interaction: Interaction[BallsDexBot], value: str) -&gt; list[Choice[int]]\n</code></pre> <p>Generate the list of options for autocompletion</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def get_options(\n    self, interaction: discord.Interaction[\"BallsDexBot\"], value: str\n) -&gt; list[app_commands.Choice[int]]:\n    \"\"\"\n    Generate the list of options for autocompletion\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.EconomyTransformer.validate","title":"validate","text":"<pre><code>validate(interaction: Interaction[BallsDexBot], item: T)\n</code></pre> <p>A function to validate the fetched item before calling back the command.</p> <p>Raises:</p> <ul> <li> <code>ValidationError</code>             \u2013            <p>Raised if the item does not pass validation with the message to be displayed</p> </li> </ul> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>async def validate(self, interaction: discord.Interaction[\"BallsDexBot\"], item: T):\n    \"\"\"\n    A function to validate the fetched item before calling back the command.\n\n    Raises\n    ------\n    ValidationError\n        Raised if the item does not pass validation with the message to be displayed\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.TradeCommandType","title":"TradeCommandType","text":"<p>               Bases: <code>Enum</code></p> <p>If a command is using <code>BallInstanceTransformer</code> for trading purposes, it should define this enum to filter out values.</p>"},{"location":"api/utils/transformers/#ballsdex.core.utils.transformers.ValidationError","title":"ValidationError","text":"<pre><code>ValidationError(message: str)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Raised when an autocomplete result is forbidden and should raise a user message.</p> Source code in <code>ballsdex/core/utils/transformers.py</code> <pre><code>def __init__(self, message: str):\n    self.message = message\n</code></pre>"},{"location":"api/utils/utils/","title":"Utility functions","text":""},{"location":"api/utils/utils/#ballsdex.core.utils.utils","title":"ballsdex.core.utils.utils","text":""},{"location":"api/utils/utils/#ballsdex.core.utils.utils.inventory_privacy","title":"inventory_privacy","text":"<pre><code>inventory_privacy(bot: BallsDexBot, interaction: Interaction[BallsDexBot], player: Player, user_obj: User | Member)\n</code></pre> <p>Check if the inventory of a user is viewable in the given context. If not, a followup response will be sent with a proper message.</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>BallsDexBot</code>)           \u2013            <p>Bot object</p> </li> <li> <code>interaction</code>               (<code>Interaction[BallsDexBot]</code>)           \u2013            <p>Interaction of the command.</p> </li> <li> <code>player</code>               (<code>Player</code>)           \u2013            <p>Ballsdex Player object of the user whose inventory is being inspected.</p> </li> <li> <code>user_obj</code>               (<code>User | Member</code>)           \u2013            <p>Discord user object of the user whose inventory is being inspected.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p><code>True</code> if the inventory can be viewed, else <code>False</code>. If this is <code>False</code>, you should exit the command.</p> </li> </ul> Source code in <code>ballsdex/core/utils/utils.py</code> <pre><code>async def inventory_privacy(\n    bot: \"BallsDexBot\",\n    interaction: discord.Interaction[\"BallsDexBot\"],\n    player: Player,\n    user_obj: Union[discord.User, discord.Member],\n):\n    \"\"\"\n    Check if the inventory of a user is viewable in the given context. If not, a followup response will be sent with a\n    proper message.\n\n    Parameters\n    ----------\n    bot: BallsDexBot\n        Bot object\n    interaction: Interaction[BallsDexBot]\n        Interaction of the command.\n    player: Player\n        Ballsdex Player object of the user whose inventory is being inspected.\n    user_obj: discord.User | discord.Member\n        Discord user object of the user whose inventory is being inspected.\n\n    Returns\n    -------\n    bool\n        `True` if the inventory can be viewed, else `False`. If this is `False`, you should exit the command.\n    \"\"\"\n    privacy_policy = player.privacy_policy\n    interacting_player, _ = await Player.objects.aget_or_create(discord_id=interaction.user.id)\n    if interaction.user.id == player.discord_id:\n        return True\n    if is_staff(interaction):\n        return True\n    if privacy_policy == PrivacyPolicy.DENY:\n        await interaction.followup.send(\"This user has set their inventory to private.\", ephemeral=True)\n        return False\n    elif privacy_policy == PrivacyPolicy.FRIENDS:\n        if not await interacting_player.is_friend(player):\n            await interaction.followup.send(\n                \"This users inventory can only be viewed from users they have added as friends.\", ephemeral=True\n            )\n            return False\n    elif privacy_policy == PrivacyPolicy.SAME_SERVER:\n        if not bot.intents.members:\n            await interaction.followup.send(\n                \"This user has their policy set to `Same Server`, \"\n                \"however I do not have the `members` intent to check this.\",\n                ephemeral=True,\n            )\n            return False\n        if interaction.guild is None:\n            await interaction.followup.send(\"This user has set their inventory to private.\", ephemeral=True)\n            return False\n        elif interaction.guild.get_member(user_obj.id) is None:\n            await interaction.followup.send(\"This user is not in the server.\", ephemeral=True)\n            return False\n    return True\n</code></pre>"},{"location":"api/utils/utils/#ballsdex.core.utils.utils.is_staff","title":"is_staff","text":"<pre><code>is_staff(interaction: Interaction[BallsDexBot]) -&gt; bool\n</code></pre> <p>Checks if an interacting user checks one of the following conditions:</p> <ul> <li>The user is a bot owner</li> <li>The user has a role considered root or admin</li> </ul> <p>Parameters:</p> <ul> <li> <code>interaction</code>               (<code>Interaction[BallsDexBot]</code>)           \u2013            <p>The interaction of the user to check.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p><code>True</code> if the user is a staff, <code>False</code> otherwise.</p> </li> </ul> Source code in <code>ballsdex/core/utils/utils.py</code> <pre><code>def is_staff(interaction: discord.Interaction[\"BallsDexBot\"]) -&gt; bool:\n    \"\"\"\n    Checks if an interacting user checks one of the following conditions:\n\n    - The user is a bot owner\n    - The user has a role considered root or admin\n\n    Parameters\n    ----------\n    interaction: Interaction[BallsDexBot]\n        The interaction of the user to check.\n\n    Returns\n    -------\n    bool\n        `True` if the user is a staff, `False` otherwise.\n    \"\"\"\n    if interaction.user.id in interaction.client.owner_ids:\n        return True\n    if interaction.guild and interaction.guild.id in settings.admin_guild_ids:\n        roles = settings.admin_role_ids + settings.root_role_ids\n        if any(role.id in roles for role in interaction.user.roles):  # type: ignore\n            return True\n    return False\n</code></pre>"},{"location":"selfhosting/","title":"Installing BallsDex-DiscordBot","text":"<p>For installation instructions, please refer to the Installing BallsDex-DiscordBot page.</p> <p>For more advanced users who wish not to use Docker, you can refer to the Installing BallsDex-DiscordBot without Docker page.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/","title":"Exposing to internet","text":"<p>If you want to leverage your experience and be able to access your admin panel from anywhere and share it with your staff, you can host it on a server and expose it to the internet! It's not an easy process but I will try to guide you there.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#1-requirements","title":"1. Requirements","text":"<p>Before doing this, you must have the following:</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#ballsdex-hosted-on-an-online-linux-server","title":"Ballsdex hosted on an online Linux server","text":"<p>It is extremely important that you do not host Ballsdex or the website on your own personal network. This would require you to open your firewall and expose your entire family to tons of dangers. DO NOT DO THIS and look for a provider, there are even free options.</p> <p>I recommend checking this page for VPS and server recommendations.</p> <p>The reason Linux is a requirement in this tutorial is simply because I don't know how this works on Windows or macOS, I cannot teach that. Besides, it would be weird to pay an additional sum for a paid OS when Linux is the recommended OS.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#your-own-domain-name","title":"Your own domain name","text":"<p>You must have a domain name to hide your IP. This is pretty cheap honestly, I recommend you to use Namecheap for cheap domain names, it's what I use myself.</p> <p>Once you got this, you should also use Cloudflare as a DNS and proxy provider, it's free, faster than the default DNS, and comes with many good features. Your server's IP will be hidden thanks to that.</p> <p>[!CAUTION] It is very important that you follow these requirements, they have security implications. Failing to follow these will result in being exposed to a lot of risks and vulnerabilities if you don't exactly know what you're doing and how it works.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#routing-your-domain-name","title":"Routing your domain name","text":"<p>On Cloudflare, create a new configuration for your domain <code>example.com</code>. It will ask you to replace nameservers with its own on Namecheap's side. Do this and wait for the changes to take effect (can take a while).</p> <p>Once Cloudflare is ready, go to the DNS page, create an <code>A</code> record and redirect it to your server's IP. If you don't know your server's IP, you can run <code>curl http://ipinfo.io/ip</code>. Be sure to tick \"Proxy\" on.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#using-https","title":"Using HTTPS","text":"<p>To have secure connections, it is highly recommended to have HTTPS connections. Luckily, Cloudflare can handle that for us.</p> <ol> <li>In Cloudflare's settings, open SSL/TLS Overview in the sidebar</li> <li>Next to \"SSL/TLS encryption\", click Configure</li> <li>Choose \"Automatic\". It should have at least \"Flexible\" mode on.</li> </ol> <p>If you want to have full end-to-end encryption, you can have a strict policy and generate your own certificates using <code>certbot</code>. Tutorial</p> <p>[!WARNING] Using unsecure HTTP to access your admin panel is dangerous. All traffic between you and the server is readable by anyone in-between, including passwords.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#program-requirements","title":"Program requirements","text":"<p>We are going to use the <code>nginx</code> program to handle the routing part. We will also need <code>pwgen</code> to generate our secret key, and <code>acl</code> to configure proper permissions. On Debian/Ubuntu, run this: <pre><code>sudo apt update\nsudo apt install nginx pwgen acl\n</code></pre></p> <p>If you are using a different distribution, look up your package manager to see how to install those dependencies.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#2-setting-up-a-firewall","title":"2. Setting up a firewall","text":"<p>Before opening yourself to the internet, ensure that your OS is configured to only allow what we need.</p> <p>Distributions have different firewall programs, but the most common one is <code>ufw</code> (preinstalled on Ubuntu). Let's configure it together.</p> <ol> <li>Disallow all incoming connections: <code>sudo ufw default deny incoming</code></li> <li>Allow all outgoing connections: <code>sudo ufw default allow outgoing</code></li> <li>Allow SSH connections: <code>sudo ufw allow OpenSSH</code></li> <li>Allow HTTP and HTTPS connections: <code>sudo ufw allow 'Nginx Full'</code></li> <li>Enable ufw: <code>sudo ufw enable</code></li> </ol> <p>If you do not have <code>ufw</code> on your system, look up what program is recommended for your distribution and allow ports 22 and 80.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#3-configure-nginx","title":"3. Configure nginx","text":"<ol> <li> <p>Grant nginx access to your files: <code>sudo setfacl -m g:www-data:rx $HOME</code></p> </li> <li> <p>Locate where your bot's folder is located. Use <code>pwd</code> to print the full directory path, and copy it</p> </li> <li> <p>Create a configuration file for Ballsdex. Assuming your domain name is <code>example.com</code>, run:    <pre><code>sudo nano /etc/nginx/sites-available/example.com\n</code></pre></p> </li> <li> <p>Write the following contents into the file:    <pre><code>server {\n        listen 80;\n        listen [::]:80;\n        client_max_body_size 100m;\n\n        server_name example.com;  # TODO: change domain\n\n        location / {\n                proxy_set_header Host $http_host;\n                proxy_pass http://localhost:8000;  # if you have a different port number, change here\n        }\n\n        location ~ ^/(static|media)/ {\n                root /home/user/BallsDex-DiscordBot/admin_panel;  # TODO: change the path of your bot's folder\n        }\n}\n</code></pre></p> </li> <li>Change the <code>server_name</code> line to have your own domain</li> <li> <p>Change the <code>root</code> line such that the path points to the <code>admin_panel</code> folder</p> </li> <li> <p>Exit and save with Ctrl+X, <code>yes</code> and enter.</p> </li> <li>Enable this configuration with <code>sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/</code> (replace <code>example.com</code> with your domain)</li> <li>Run <code>sudo nginx -s reload</code> to instruct nginx to load the new configuration.</li> </ol>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#4-configuring-the-ballsdex-admin-panel","title":"4. Configuring the Ballsdex admin panel","text":"<p>We're slowly getting there! Now we just need to configure the last few bits on Ballsdex's side.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#configure-the-production-settings","title":"Configure the production settings","text":"<p>In production, we need different settings for Django. An example <code>production.py</code> file is provided, which we will copy and fill. Open a shell and type the following commands:</p> <ol> <li><code>cd admin_panel/admin_panel/settings</code></li> <li><code>cp production.example.py production.py</code></li> <li>Generate a random string of characters with <code>pwgen -n 64 1</code> and copy that</li> <li><code>nano production.py</code> (or your preferred editor)</li> <li>Find the line that says <code>SECRET_KEY = None</code> and replace it with <code>SECRET_KEY = \"paste your random string here\"</code></li> <li>Look down for the <code>ALLOWED_HOSTS</code> section and replace <code>localhost</code> by your domain</li> <li>Exit and save with Ctrl+x, <code>yes</code> and enter.</li> </ol> <p>This <code>production.py</code> file should remain secret and never be pushed. It will be ignored by git.</p> <p>[!WARNING] Keep your <code>SECRET_KEY</code> secret. Running Django with a known <code>SECRET_KEY</code> defeats many of Django\u2019s security protections, and can lead to privilege escalation and remote code execution vulnerabilities. https://docs.djangoproject.com/en/5.1/ref/settings/#secret-key</p> <p>[!TIP] Feel free to edit the <code>production.py</code> file to extend the configuration and add more settings, such as extensions or custom admin themes. Future updates will change settings in <code>base.py</code> and <code>production_base.py</code> and automatically apply to your configuration.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#telling-django-about-your-settings","title":"Telling Django about your settings","text":"<p>To make use of that <code>production.py</code> file, you need to tell Django via the <code>DJANGO_SETTINGS_MODULE</code> environment variable.</p> <p>You will find in <code>docker-compose.yml</code> there is already a commented environment variable, simply uncomment that line. If you're not using docker compose, simply run <code>export DJANGO_SETTINGS_MODULE=admin_panel.settings.production</code> before running the server.</p> <p>At this point, restart your admin panel and you should now be able to access it at your domain name, in https, from anywhere!</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#next-steps","title":"Next steps","text":"<p>Now that your admin panel is online, there are some additional settings that may interest you.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#discord-oauth2","title":"Discord OAuth2","text":"<p>If you followed the first guide, you may have configured Discord OAuth2 to login with Discord and not create accounts. This now applies to your staff too! Here's how the Discord pipeline works:</p> <ul> <li>Does the user have Two-factor authentication enabled?</li> <li>If not, login is immediately denied.</li> <li>Is the user ID in the <code>co-owners</code> section of <code>config.yml</code>?</li> <li>If yes, the user is granted the superuser status.</li> <li>Is the user ID the owner of the Discord application?</li> <li>If yes, the user is granted the superuser status.</li> <li>Is <code>team-members-are-owners</code> set to <code>true</code> in <code>config.yml</code>, and is the user ID part of the Discord developer team that owns the application (regardless of its role)?</li> <li>If yes, the user is granted the superuser status.</li> <li>Does the user possess one of the roles defined in <code>root-role-ids</code> in <code>config.yml</code>?</li> <li>If yes, the user is granted the staff status and is assigned the Admin group (detailed below).</li> <li>Does the user possess one of the roles defined in <code>admin-role-ids</code> in <code>config.yml</code>?</li> <li>If yes, the user is granted the staff status and is assigned the Staff group (detailed below).</li> </ul> <p>If you have configured a Discord webhook, you will be notified for each new user that registers successfully on your admin panel. It is highly recommended to have this setup!</p> <p>[!CAUTION] Here's the very important part, staff status is not automatically unassigned if you demote a user in Discord!!</p> <p>When demoting someone (admin/root role removed, removed from the Developer team or the <code>co-owners</code> list), you must also go to the admin panel, \"Users\", edit the user (if they registered on the panel) and untick the \"Is Active\" box. You do not need to untick \"Is staff\", \"Is superuser\" or remove permissions groups. Unticking \"Is Active\" completely disables logging in and invalidates all sessions. If you want to re-enable the user, simply tick this box back.</p> <p>It is important that you do not delete the user, or you will be losing all audit logs!</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#disabling-discord-oauth2","title":"Disabling Discord OAuth2","text":"<p>If you prefer creating admin accounts yourself and not automatically give access to all your staff, you can disable the \"Login with Discord\" button by adding the following lines to your <code>production.py</code> file:</p> <pre><code>AUTHENTICATION_BACKENDS = [\n    # \"social_core.backends.discord.DiscordOAuth2\",\n    \"django.contrib.auth.backends.ModelBackend\",\n]\n</code></pre> <p>Simply uncomment the line if you want to re-enable this.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#creating-new-accounts","title":"Creating new accounts","text":"<p>Whether you have Discord OAuth2 or not, you can always choose to create manual admin accounts with a login and a password.</p> <p>For that, open the admin panel and click the \"+ Add\" button next to \"Users\". Choose a login and a password. Once created, you can then edit the user's permissions. It is recommended that you ask users to reset their password as soon as they login for the first time. They can do so by clicking the button on the top right of the admin panel.</p> <p>[!IMPORTANT] If you need to delete a user, do not actually delete it as you will be losing all audit logs! Instead, untick the \"Is active\" checkbox, that will prevent them from logging in and invalidate all existing sessions. To re-enable access, simply tick that box again. The previous permissions will apply.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#creating-a-superuser-account-from-the-command-line","title":"Creating a superuser account from the command line","text":"<p>If you need to create a new superuser account without accessing the admin panel (for instance, the first admin account), you can use the following command and follow the prompts.</p> <ul> <li>With docker: <code>docker compose exec admin-panel python3 manage.py createsuperuser</code></li> <li>Without docker: <code>cd admin_panel &amp;&amp; poetry run python3 manage.py createsuperuser</code></li> </ul>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#disabling-password-authentication","title":"Disabling password authentication","text":"<p>If you want to exclusively rely on Discord OAuth2 for authentication, you can disable password-based accounts by adding the following lines to your <code>production.py</code> file:</p> <pre><code>AUTHENTICATION_BACKENDS = [\n    \"social_core.backends.discord.DiscordOAuth2\",\n    # \"django.contrib.auth.backends.ModelBackend\",\n]\n</code></pre> <p>Simply uncomment the line if you want to re-enable this.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#handling-permissions","title":"Handling permissions","text":"<p>Django has an extensive permission system described here.</p> <p>Put simply, each model (Ball, BallInstance, Regime, Player, ...) has 4 permissions by default: view, change, add, delete. Users with the \"superuser\" status bypasses all permissions and has access to everything.</p> <p>You can assign permissions to individual users by editing their user object, but you can also use permission groups.</p>"},{"location":"selfhosting/admin-panel/exposing-to-internet/#using-groups","title":"Using groups","text":"<p>Under the \"Authorization &amp; Authentication\" section, you will find a \"Group\" section, allowing you to create named groups with a set of permissions.</p> <p>If you have staff members logging in, you will get two groups created automatically, with the corresponding permissions assigned.</p> Click to unroll the default groups and permissions Permission Staff Admin Ball View \u274c \u2705 Change \u274c \u2705 Add \u274c \u2705 Delete \u274c \u2705 Regime View \u274c \u2705 Change \u274c \u2705 Add \u274c \u2705 Delete \u274c \u2705 Economy View \u274c \u2705 Change \u274c \u2705 Add \u274c \u2705 Delete \u274c \u2705 Special View \u274c \u2705 Change \u274c \u2705 Add \u274c \u2705 Delete \u274c \u2705 BallInstance View \u2705 \u2705 Change \u274c \u2705 Add \u274c \u2705 Delete \u274c \u2705 BlacklistedID View \u2705 \u2705 Change \u2705 \u2705 Add \u2705 \u2705 Delete \u2705 \u2705 BlacklistedGuild View \u2705 \u2705 Change \u2705 \u2705 Add \u2705 \u2705 Delete \u2705 \u2705 BlacklistHistory View \u2705 \u2705 Change \u274c \u274c Add \u274c \u274c Delete \u274c \u274c Block View \u2705 \u2705 Change \u2705 \u2705 Add \u2705 \u2705 Delete \u2705 \u2705 Friendship View \u2705 \u2705 Change \u2705 \u2705 Add \u2705 \u2705 Delete \u2705 \u2705 GuildConfig View \u2705 \u2705 Change \u2705 \u2705 Add \u274c \u2705 Delete \u274c \u2705 Player View \u2705 \u2705 Change \u2705 \u2705 Add \u274c \u2705 Delete \u274c \u2705 Trade View \u2705 \u2705 Change \u274c \u274c Add \u274c \u274c Delete \u274c \u274c TradeObject View \u2705 \u2705 Change \u274c \u274c Add \u274c \u274c Delete \u274c \u274c <p>[!TIP] You are free to edit those permissions after they were created.</p>"},{"location":"selfhosting/admin-panel/getting-started/","title":"Getting started","text":"<p>Ballsdex now uses Django to power its admin panel. It is a much more powerful, stable and efficient system than the old fastapi admin panel.</p>"},{"location":"selfhosting/admin-panel/getting-started/#starting-the-panel","title":"Starting the panel","text":"<p>If you are running Docker, the panel may already be running. Just do <code>docker compose up -d admin-panel</code> to start if it's not running.</p> <p>Without docker, the command to start the admin panel is <code>cd admin_panel &amp;&amp; poetry run python3 manage.py migrate &amp;&amp; poetry run python3 manage.py collectstatic --no-input &amp;&amp; poetry run uvicorn admin_panel.asgi:application</code></p> <p>The panel will then be accessible at http://localhost:8000</p>"},{"location":"selfhosting/admin-panel/getting-started/#configuring-the-panel","title":"Configuring the panel","text":"<p>Before using this panel, you must configure a way to login. You can either enable the \"Login with Discord\" button, or use accounts with a password (or both).</p>"},{"location":"selfhosting/admin-panel/getting-started/#using-local-accounts","title":"Using local accounts","text":"<p>The easiest way to login is to create accounts with a login and a password. Run the commands below and follow the prompts.</p> With DockerWithout Docker <pre><code>docker compose up -d admin-panel\ndocker compose exec admin-panel python3 manage.py createsuperuser\n</code></pre> <pre><code>cd admin_panel &amp;&amp; poetry run python3 manage.py createsuperuser\n</code></pre> <p>Then you can login using the chosen credentials at http://localhost:8000. Additional accounts can be created from the admin panel.</p>"},{"location":"selfhosting/admin-panel/getting-started/#using-discord-oauth2-login-with-discord","title":"Using Discord OAuth2 (login with Discord)","text":"<p>This will only let the bot owner access the admin panel when logged in, no need to remember any password.</p> <ol> <li>Go to the Discord developer portal and click on your application</li> <li>Click the \"OAuth\" tab</li> <li>Copy the application ID and paste it in your <code>config.yml</code> file, next to <code>client-id:</code> (don't forget to leave a space after the colon)</li> <li>Generate your application secret and paste it in the config file, next to <code>client-secret:</code></li> <li>Add a new redirect URI: <code>http://localhost:8000/complete/discord/</code> (the trailing slash is important)</li> <li>Save the changes</li> </ol> <p>Danger</p> <p>Keep your application secret hidden at all times, it must never be shared (like your bot token)! If you have suspicion this file was leaked, immediately reset it in your developer portal.</p> <p>In addition, you can also create a webhook for notifications from the admin panel, such as a new user registering or more in the future. This is optional but recommended:</p> <ol> <li>Go to a Discord text channel that's only viewable by you or other admins</li> <li>Open the settings, then the integrations menu, then create a Webhook</li> <li>Copy the URL, and paste it next to <code>webhook-url:</code> in the config file</li> </ol> <p>You should now be good to go. Run <code>docker compose up -d admin-panel</code> to start the admin panel (if it was already running, restart it), and open http://localhost:8000/ in your browser. Click the \"Login with Discord\" button and follow the steps. If you are the bot owner, then you will have the superuser status automatically assigned.</p> <p>Developer teams</p> <p>If the application is owned by a team, set <code>team-members-are-owners</code> to true in the config file, otherwise you won't get access.</p>"},{"location":"selfhosting/admin-panel/getting-started/#using-the-panel","title":"Using the panel","text":"<p>Once you are logged in, you will see the panel's home page, with multiple options appearing on the sidebar.</p> <p>The \"Authentication and authorization\" section should be ignored unless you serve the panel on the internet, it contains the user accounts and permission groups. \"Python social auth\" should also be ignored and not tampered with, it contains the Discord OAuth2 data that allows you to login.</p> <p>The \"Ballsdex models\" section is what you are looking for, it has all the models from the bot:</p> <ul> <li><code>BallInstances</code> represents instances of a ball that were obtained by a player. You can use that to give balls to players, delete then, modify attributes or look at its trade history. Searching via hexadecimal ID is supported.</li> <li><code>Balls</code> is where you create your countryballs (or whatever your bot is themed after). It's the first thing you want to visit, more details below.</li> <li><code>Economies</code> is for the little icon on the top right of cards. By default, you'll have communist and capitalist economies (but you can set none).</li> <li><code>Players</code> contains the list of all players. You can change their settings, view their inventory, trade history, or latest catches (to hunt for farmers). Searching by Discord ID works.</li> <li><code>Regimes</code> represents the backgrounds of your cards. Each ball must have a regime assigned. By default you have 3 available: democracy, dictatorship and union.</li> <li><code>Specials</code> is for making some ball instances special with a custom background and a special catching phrase. They can have start and end dates for limited-time events, a custom phrase to display when caught, and ofc the special background to apply. Using a rarity of 0 renders it unobtainable by the public, but can still be applied by admins.</li> <li><code>Trades</code> has the list of all trades performed. Clicking on a trade will show all of its contents.</li> </ul> <p>Info</p> <p>The admin panel will always use the Ballsdex vocabulary (countryballs). If you have set a custom name for your bot or your collectibles, don't worry, they will be used throughout the bot itself.</p>"},{"location":"selfhosting/admin-panel/getting-started/#creating-your-first-countryball","title":"Creating your first countryball","text":"<p>Click the \"Add\" button next to \"Balls\", or click the \"Add ball\" button on the top left if you have opened the balls tab. You will be presented with a form to fill. If the label on the left side is bold, it means a value is required, otherwise it's optional.</p>"},{"location":"selfhosting/admin-panel/getting-started/#base-fields","title":"Base fields","text":"<ul> <li><code>Country</code>: The name of your collectible</li> <li><code>Health</code> and <code>Attack</code>: Base stats, they will be applied a +/-20% bonus when caught (customizable in <code>config.yml</code>)</li> <li><code>Rarity</code>: Defines how rare the ball will be when spawning. Setting a rarity of 0 will make the ball unspawnable (but it will still appear in completion and user commands!). Check this page to understand how rarity works.</li> <li><code>Emoji ID</code>: The ID of your ball's emoji. You can upload application emojis from the Discord developer portal, click your bot and go to the \"Emojis\" tab. Emojis from servers shared by the bot are also supported.</li> <li><code>Economy</code>: The icon at the top right of your card. You can leave this blank.</li> <li><code>Regime</code>: Sets the background of your card, this is required.</li> </ul>"},{"location":"selfhosting/admin-panel/getting-started/#assets","title":"Assets","text":"<p>Then you have a section for assets. You must upload two files:</p> <ul> <li><code>Wild card</code>: The file that will be sent in the chat when the ball spawns. It's usually a file, but you can upload a video, a GIF, an mp3... anything that embeds in Discord.</li> <li><code>Collection card</code>: The image used when generating the card. The size of the image should be 1359x731, or a ratio of approximatively 18:10 (it is automatically resized and centered).</li> <li><code>Credits</code>: This is where you credit the artists of both uploaded assets.</li> </ul> <p>Danger</p> <p>\u26a0\ufe0f You must have the permission to use the images you are uploading!! \u26a0\ufe0f</p> <p>Not everything you find on Google is free to use, unless it is clearly labelled as Creative commons (there is a filter in Google images for that). Unless you are the artist, you must have explicit permission from the artist to use their assets in your bot. This may come at the cost of a license.</p> <p>Violating licenses exposes you to a DMCA complaint, which can lead to both your bot and your own account getting banned from Discord.</p> <p>All art used by Ballsdex is licensed to the Ballsdex Team and cannot be reused by other bots without permission from their artists. However, the MIT-licensed files included in the bot repository (such as the default backgrounds) are free to use.</p>"},{"location":"selfhosting/admin-panel/getting-started/#ability","title":"Ability","text":"<p>Finally, you have two fields, <code>Capacity name</code> and <code>Capacity description</code>, which actually refer to the ability name and description. My english wasn't as good back then, and it's hard to change it now.</p>"},{"location":"selfhosting/admin-panel/getting-started/#advanced","title":"Advanced","text":"<p>If you unroll this section, you will find a few settings you probably don't need at first.</p> <ul> <li><code>Enabled</code>: If unticked, the ball will not spawn (regardless of rarity), appear in <code>/balls completion</code> or appear in user-facing commands. You can still spawn it or give it manually using <code>/admin</code> commands or this panel.</li> <li><code>Tradeable</code>: If unticked, any instance of this ball won't be tradeable at all.</li> <li><code>Short Name</code>: When the name is so long that it overflows in the card, you can use this field to choose a shorter name that will be only used in card generation. This is limited to 12 characters.</li> <li><code>Catch names</code>: A list of additional names, lowercased and separated by semicolons, that can be used to catch this countryball when spawned. The main name remains usable for catching. It is important to not leave any space between the semicolons or this will break.</li> <li><code>Translations</code>: This has the exact same effect as <code>Catch names</code>. The reason this exists is to automatically update translations without breaking additional catch names (like abbreviations).</li> <li><code>Capacity logic</code>: A JSON field of extra data, currently unused. This is planned to be used for the battle system.</li> </ul> <p>Once you have filled everything needed, click the \"Save and continue editing\" button, this will show you a preview of what the card looks like in the sidebar! Once you're satisfied with the result, go to Discord and send <code>b.reloadcache</code> to your bot, and your ball should start spawning.</p> <p>Success</p> <p>It is always a good idea to test spawn your ball with <code>/admin balls spawn</code> and ensure it works as intended.</p> <p>Tip</p> <p>You can edit rarities and enable balls in bulk from the list of balls. There is a save button at the end.</p> <p>Caution</p> <p>Deleting a ball will delete all ball instances associated. This may be an extremely slow operation, and it is not reversible!</p>"},{"location":"selfhosting/admin-panel/getting-started/#creating-your-first-special","title":"Creating your first special","text":"<p>A \"special\" is a way to override the attributes of a ball instance to make it special. When a ball is caught, it may gain an active special based on its rarity. By default, you will have one special named \"Shiny\" with a chance of 1/2048 to happen. If you do not want shinies on your bot, it is safe to delete it from this panel.</p> <p>Specials can have a start and end date to indicate that it will be limited in time, but you can also omit those to have a special active permanently.</p> <p>Warning</p> <p>If you want to end a special from being active, do not delete it as all ball instances will lose the special attribute. Instead, configure the end date or set its rarity to 0.</p>"},{"location":"selfhosting/admin-panel/getting-started/#base-fields_1","title":"Base fields","text":"<ul> <li><code>Name</code>: The name of this special</li> <li><code>Catch phrase</code>: A sentence that will appear when a caught ball gets this special, for example \"It's a shiny countryball\"</li> <li><code>Rarity</code>: Defines the odds of getting that special. This must be between 0 and 1 included. Check this page to understand how rarity works.</li> <li><code>Emoji</code>: The emoji to place next to the ball instance to identify it. This must be a single unicode emoji, Discord emojis cannot be used for technical reasons.</li> <li><code>Background</code>: The new background to apply, this must be precisely 1428x2000 pixels. If the dimensions are off, the card generation will break.</li> <li><code>Start date</code> and <code>End date</code>: Optional date range to keep this event active. Both values are optional. Not setting a start date will make an event active immediately upon reload.</li> </ul>"},{"location":"selfhosting/admin-panel/getting-started/#advanced_1","title":"Advanced","text":"<ul> <li><code>Tradeable</code>: Similar to the Ball setting, unticking this renders all balls with this special untradeable.</li> <li><code>Hidden</code>: If ticked, this special won't appear in user-facing commands (such as slash command autocompletion)</li> </ul> <p>Don't forget to run <code>b.reloadcache</code> to refresh your modifications!</p> <p>Creating balls and specials are the most important aspect of the admin panel, once you understood this you should be good to go.</p> <p>There are many more tools this admin panel offers, but you should be able to understand by yourself how they work by exploring!</p> <p>Important</p> <p>If you want to expose your admin panel online, please follow this tutorial! It's important that you do not expose the website yourself, the default configuration is insecure.</p>"},{"location":"selfhosting/installation/installing-ballsdex-no-docker/","title":"Installing Ballsdex without Docker","text":"<p>The recommended way to run Ballsdex is using Docker, but you may have reasons to run it without this dependency.</p> <p>This install method is supported but only recommended for the advanced users, there are a lot of additional steps and dependencies to manage yourself.</p> <p>Info</p> <p>Few commands will be given, but online guides are given instead. This is because instructions differ between operating systems, so you have to use what's best for you.</p>"},{"location":"selfhosting/installation/installing-ballsdex-no-docker/#1-setting-up-the-database","title":"1. Setting up the database","text":"<p>Install PostgreSQL and start it. Create a database by following this guide.</p> <p>You must then have a link to connect to the database in the following format: <code>postgres://username:password@localhost:5432/database_name</code></p> <p>Test that your database is up with the following command: <code>psql -c \"\\l\" postgres://username:password@localhost:5432/database_name</code> Check that your database appears in the list and that your user is the owner.</p>"},{"location":"selfhosting/installation/installing-ballsdex-no-docker/#2-requirements","title":"2. Requirements","text":""},{"location":"selfhosting/installation/installing-ballsdex-no-docker/#git","title":"git","text":"<p>Git is needed to download and update the source code.</p>"},{"location":"selfhosting/installation/installing-ballsdex-no-docker/#uv","title":"uv","text":"<p>You will need our package manager <code>uv</code> to install the dependencies, manage Python versions and virtual environments.</p> <p>Follow the instructions here to install uv on your system.</p> <p>Tip</p> <p>Ballsdex requires Python 3.13 at least.</p> <p>If you don't have it installed, <code>uv</code> will install it for you, but you can make the installation lighter by installing Python 3.13 with your system's package manager.</p>"},{"location":"selfhosting/installation/installing-ballsdex-no-docker/#create-a-discord-bot-account","title":"Create a Discord bot account","text":"<p>You must first setup a Discord bot account. You can follow discord.py's tutorial to create and invite your bot.</p> <p>For now, don't copy your token, but keep the page open.</p> <p>Once this is configured, you also need to enable message content intent. Go to the \"Bot\" tab of your application, scroll down to \"Privileged intents\" and tick \"Message content\".</p> <p>Info</p> <p>You can fill the description of your application, it will appear under the \"About me\" section.</p>"},{"location":"selfhosting/installation/installing-ballsdex-no-docker/#3-download-the-source-code","title":"3. Download the source code","text":"<p>Type the following command to download the latest version of the bot:</p> <pre><code>git clone https://github.com/laggron42/BallsDex-DiscordBot.git\n</code></pre> <p>Then you can use the command cd to change directory and open the folder you just downloaded:</p> <pre><code>cd BallsDex-DiscordBot\n</code></pre>"},{"location":"selfhosting/installation/installing-ballsdex-no-docker/#4-installing-the-bot","title":"4. Installing the bot","text":"<ol> <li> <p>Download the bot's dependencies and install them in a virtual environment.</p> <pre><code>uv sync\n</code></pre> <p>Info</p> <p>If you don't have Python 3.13, it will also be downloaded for your virtual environment.</p> </li> <li> <p>Open the virtual environment where your dependencies are</p> Linux/macOSWindows (PowerShell) <pre><code>source .venv/bin/activate\n</code></pre> <pre><code>. .\\.venv\\Scripts\\activate.ps1\n</code></pre> </li> <li> <p>Export the <code>BALLSDEXBOT_DB_URL</code> environment variable with the link to Postgres you tested earlier.</p> Linux/macOSWindows (PowerShell) <pre><code>export BALLSDEXBOT_DB_URL=postgres://username:password@localhost:5432/database_name\n</code></pre> <pre><code>$Env.BALLSDEXBOT_DB_URL = 'postgres://username:password@localhost:5432/database_name'\n</code></pre> </li> <li> <p>Check that the bot loads successfully. This should print the version number and exit.     <pre><code>python3 -m ballsdex --version\n</code></pre></p> </li> <li> <p>Create the default configuration file     <pre><code>python3 -m ballsdex --reset-settings\n</code></pre></p> </li> <li> <p>Open the <code>admin_panel</code> folder for the next steps     <pre><code>cd admin_panel\n</code></pre></p> </li> <li> <p>Initialize the database     <pre><code>python3 manage.py migrate\n</code></pre></p> </li> <li> <p>Initialize the admin panel     <pre><code>python3 manage.py collectstatic --no-input\n</code></pre></p> </li> <li>Return to the previous directory for the next steps     <pre><code>cd ..\n</code></pre></li> </ol>"},{"location":"selfhosting/installation/installing-ballsdex-no-docker/#5-configure-the-bot","title":"5. Configure the bot","text":"<p>Follow this section from the main tutorial to fill the base settings.</p>"},{"location":"selfhosting/installation/installing-ballsdex-no-docker/#6-run-the-bot","title":"6. Run the bot","text":"<p>Then, run <code>python3 -m ballsdex</code> to start the bot! To shut it down, type Ctrl+C.</p> <p>Tip</p> <p>There are multiple options available when running the bot, do <code>python3 -m ballsdex -h</code> to view them.</p>"},{"location":"selfhosting/installation/installing-ballsdex-no-docker/#running-the-admin-panel","title":"Running the admin panel","text":"<ol> <li> <p>Open another shell with the virtualenv and the environment variables exported</p> Linux/macOSWindows (PowerShell) <pre><code>source .venv/bin/activate\nexport BALLSDEXBOT_DB_URL=postgres://username:password@localhost:5432/database_name\n</code></pre> <pre><code>. .\\.venv\\Scripts\\activate.ps1\n$Env.BALLSDEXBOT_DB_URL = 'postgres://username:password@localhost:5432/database_name'\n</code></pre> </li> <li> <p>Start the admin panel     <pre><code>cd admin_panel &amp;&amp; uvicorn admin_panel.asgi:application\n</code></pre></p> </li> <li>Follow this guide afterwards</li> </ol>"},{"location":"selfhosting/installation/installing-ballsdex-no-docker/#summary","title":"Summary","text":"<p>Before running any command, do these:</p> Linux/macOSWindows (PowerShell) <pre><code># open the bot's directory\ncd BallsDex-DiscordBot\n\n# activate the virtual environment\nsource .venv/bin/activate\n\n# export the database env var\nexport BALLSDEXBOT_DB_URL=postgres://username:password@localhost:5432/database_name\n</code></pre> <pre><code># open the bot's directory\ncd BallsDex-DiscordBot\n\n# activate the virtual environment\n. .\\.venv\\Scripts\\activate.ps1\n\n# export the database env var\n$Env.BALLSDEXBOT_DB_URL = 'postgres://username:password@localhost:5432/database_name'\n</code></pre> <p>Then</p> <ul> <li>Start the bot:   <pre><code>python3 -m ballsdex\n</code></pre></li> <li>Start the admin panel:   <pre><code>cd admin_panel &amp;&amp; uvicorn admin_panel.asgi:application\n</code></pre></li> </ul>"},{"location":"selfhosting/installation/installing-ballsdex-no-docker/#updating-the-bot","title":"Updating the bot","text":"<ol> <li>Pull the new files.     <pre><code>git pull\n</code></pre></li> <li>Update dependencies     <pre><code>uv sync\n</code></pre></li> <li>Open the admin panel folder     <pre><code>cd admin_panel\n</code></pre></li> <li>Update the database schemas     <pre><code>python3 manage.py migrate\n</code></pre></li> <li>Update the admin panel static files     <pre><code>python3 manage.py collectstatic --no-input\n</code></pre></li> <li>Restart the bot and admin panel</li> </ol>"},{"location":"selfhosting/installation/installing-ballsdex/","title":"Installing ballsdex","text":"<p>Ballsdex is an open source Discord bot for catching countryballs, which you can install yourself and customize!</p> <p>While it can run on all operating systems, it is highly recommended to host Ballsdex on Linux (macOS mostly works the same as well). The recommended distribution we will use through this tutorial is Ubuntu 24.04.</p>"},{"location":"selfhosting/installation/installing-ballsdex/#windows-only-installing-wsl","title":"(Windows only) Installing WSL","text":"<p>Windows can easily run Linux distributions thanks to WSL (Windows Subsystem for Linux). You must be running Windows 10 version 2004 and higher (Build 19041 and higher) or Windows 11.</p> <p>Info</p> <p>You need about 30GB of free space on your main disk. Check now that you have enough space.</p> <p>To install Ubuntu, press Win+X and click \"PowerShell (administrator)\" then run the following command:</p> <pre><code>wsl --install\n</code></pre> <p>This will take a while, and may require a restart of your PC. Once it is installed, search \"Ubuntu\" in Windows to open the Linux shell. You will be asked a password on first start.</p>"},{"location":"selfhosting/installation/installing-ballsdex/#1-install-requirements","title":"1. Install requirements","text":"<p>To run Ballsdex, we need Docker and git.</p> <p>Warning</p> <p>Throughout this tutorial, you will need to type a lot of commands. You need to check each command's output and verify that it doesn't produce any error. If you suspect a command failed and errored, do not keep going and fix the errors first.</p> <ol> <li> <p>Type the following commands in your Linux terminal one by one to proceed.    You will be asked to type the password you have chosen earlier to continue. What your type will be hidden but don't worry, keep typing and press enter, it will work. If your terminal doesn't let you paste text with Ctrl+V, try right clicking instead. <pre><code>sudo apt update\nsudo apt install -y git apt-transport-https ca-certificates curl software-properties-common\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt update\napt-cache policy docker-ce\nsudo apt install -y docker-ce\n</code></pre></p> <p>At this point, you should have Docker running.</p> </li> <li> <p>Verify that Docker is running with <code>sudo systemctl status docker</code>, you should have an output like this:    <pre><code>\u25cf docker.service - Docker Application Container Engine\n     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n     Active: active (running) since Fri 2022-04-01 21:30:25 UTC; 22s ago\nTriggeredBy: \u25cf docker.socket\n       Docs: https://docs.docker.com\n   Main PID: 7854 (dockerd)\n      Tasks: 7\n     Memory: 38.3M\n        CPU: 340ms\n     CGroup: /system.slice/docker.service\n             \u2514\u25007854 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\n</code></pre>    Press <code>q</code> to exit this screen.</p> </li> <li> <p>Give your user the docker group. This will avoid having to use <code>sudo</code> every time you use Docker.    <pre><code>sudo usermod -aG docker ${USER}\nsu - ${USER}\n</code></pre></p> </li> <li> <p>Verify Docker is working by running a test    <pre><code>docker run hello-world\n</code></pre>    You should see a welcome message from Docker if everything installed successfully!</p> </li> </ol> <p>Tip</p> <p>If you are running macOS, you can use Docker Desktop instead.</p>"},{"location":"selfhosting/installation/installing-ballsdex/#2-create-a-discord-bot-account","title":"2. Create a Discord bot account","text":"<p>You must first setup a Discord bot account. You can follow discord.py's tutorial to create and invite your bot.</p> <p>For now, don't copy your token, but keep the page open.</p> <p>Once this is configured, you also need to enable message content intent. Go to the \"Bot\" tab of your application, scroll down to \"Privileged intents\" and tick \"Message content\".</p> <p>Info</p> <p>You can fill the description of your application, it will appear under the \"About me\" section.</p>"},{"location":"selfhosting/installation/installing-ballsdex/#3-download-the-bot","title":"3. Download the bot","text":"<p>Type the following command to download the latest version of the bot: <pre><code>git clone https://github.com/laggron42/BallsDex-DiscordBot.git\n</code></pre></p> <p>Then you can use the command <code>cd</code> to change directory and open the folder you just downloaded: <pre><code>cd BallsDex-DiscordBot\n</code></pre></p> <p>From this point, every time you need to type commands for Ballsdex, you must always open the bot's directory first.</p> <p>Navigating files</p> <p>If you want to explore the files and folders with a graphical interface, you can use the following commands to bring up your system's explorer:</p> <ul> <li>Windows (WSL): <code>explorer.exe .</code></li> <li>macOS: <code>open .</code></li> <li>Linux: <code>xdg-open .</code></li> </ul> <p>It will be useful later when we'll need to edit files. Do not forget the trailing dot of each command, otherwise it won't open the correct directory.</p>"},{"location":"selfhosting/installation/installing-ballsdex/#4-installing-the-bot","title":"4. Installing the bot","text":"<ol> <li>Run <code>docker compose build</code>. This will also take some time, wait for the build to complete.</li> <li>Run <code>docker compose up bot</code> to generate the default configuration file. Skip this step if you already have a <code>config.yml</code> file. The following text should appear:</li> </ol> <p>The process should exit afterwards. If it doesn't, hit <code>Ctrl+C</code>.</p>"},{"location":"selfhosting/installation/installing-ballsdex/#5-configure-the-bot","title":"5. Configure the bot","text":"<p>Open the new <code>config.yml</code> file with the editor of your choice. I recommend using Visual Studio Code to get autocompletion and error highlighting. Once installed, you can run <code>code config.yml</code> to open VScode from your terminal (even in WSL).</p> <p>Info</p> <p>In YAML files, everything after a <code>#</code> is a comment. Those lines are here to document and help you understand the possible values.</p> <ol> <li>Go back to the Discord developer portal and click \"Reset Token\" to obtain a new one. Copy and paste it right after <code>discord-token:</code>. Make sure that there is a space between <code>discord-token:</code> and your token, otherwise it will not work.</li> </ol> <p>Danger</p> <p>Do not share your token! It is the password of your bot, and allows anyone full access to its account if shared. Be sure to keep it secure, and immediately reset if you think it leaked.</p> <ol> <li> <p>The <code>about</code> section defines a few traits of the <code>/about</code> command. Feel free to change the <code>description</code> and the <code>discord-invite</code>.</p> </li> <li> <p>You can change <code>collectible-name</code> which will replace the word <code>countryball</code> in the bot. For instance if you set \"rock\", the bot will say \"A wild rock spawned!\" </p> </li> <li> <p><code>bot-name</code> is used in various places like <code>/about</code> or <code>/balls completion</code>.</p> </li> <li> <p>The <code>admin</code> section configures the <code>/admin</code> command. This command is only enabled in specific servers for specific roles.</p> </li> <li> <p><code>guild-ids</code> is for the servers where you want to enable the <code>/admin</code> command. Copy the IDs of the servers you want, and paste them</p> </li> <li> <p><code>root-role-ids</code> is for the roles IDs which will get full access to the <code>/admin</code> command, granting the ability to spawn or give balls and control blacklist.</p> </li> <li> <p><code>admin-role-ids</code> is for the role IDs which will get partial access to the <code>/admin</code> command. Their access will be limited to blacklist control and seeing shared servers.</p> </li> </ol> <p>General notice about IDs</p> <p>To obtain an ID, enable developer mode and right click a server or a role, then select \"Copy ID\".</p> <p>If you have just one ID, put it like this (for instance guild IDs) <pre><code>guild-ids:\n  - 1049118743101452329\n</code></pre></p> <p>If you have multiple IDs, they should be placed like this (for instance role IDs here): <pre><code>root-role-ids:\n  - 1049119446372986921\n  - 1049119786988212296\n</code></pre></p> <p>There may be other configuration values added over time, look at the comment to understand what they do. If an option is unclear to you, you should leave it to its default value.</p> Here's the <code>config.yml</code> file from Ballsdex if you want to compare and troubleshoot eventual issues: <pre><code># yaml-language-server: $schema=json-config-ref.json\n\n# paste the bot token after regenerating it here\ndiscord-token: INSERT_TOKEN_HERE\n\n# prefix for old-style text commands, mostly unused\ntext-prefix: b.\n\n# define the elements given with the /about command\nabout:\n\n  # define the beginning of the description of /about\n  # the other parts is automatically generated\n  description: &gt;\n    Collect countryballs on Discord, exchange them and battle with friends!\n\n  # override this if you have a fork\n  github-link: https://github.com/laggron42/BallsDex-DiscordBot\n\n  # valid invite for a Discord server\n  discord-invite: https://discord.gg/ballsdex  # BallsDex official server\n\n  terms-of-service: https://gist.github.com/laggron42/52ae099c55c6ee1320a260b0a3ecac4e\n  privacy-policy: https://gist.github.com/laggron42/1eaa122013120cdfcc6d27f9485fe0bf\n\n# override the name \"countryballs\" in the bot\ncollectible-name: countryball\n\n# override the name \"BallsDex\" in the bot\nbot-name: BallsDex\n\n# players group cog command name\n# this is /balls by default, but you can change it for /animals or /rocks for example\nplayers-group-cog-name: balls\n\n# enables the /admin command\nadmin-command:\n\n  # all items here are list of IDs. example on how to write IDs in a list:\n  # guild-ids:\n  #   - 1049118743101452329\n  #   - 1078701108500897923\n\n  # list of guild IDs where /admin should be registered\n  guild-ids:\n    - 1049118743101452329\n\n  # list of role IDs having full access to /admin\n  root-role-ids:\n    - 1049119446372986921\n    - 1049119786988212296\n    - 1095015474846248970\n\n  # list of role IDs having partial access to /admin\n  admin-role-ids:\n    - 1073775485840003102\n    - 1073776116898218036\n\npackages:\n  - ballsdex.packages.admin\n  - ballsdex.packages.balls\n  - ballsdex.packages.config\n  - ballsdex.packages.countryballs\n  - ballsdex.packages.info\n  - ballsdex.packages.players\n  - ballsdex.packages.trade\n\n# prometheus metrics collection, leave disabled if you don't know what this is\nprometheus:\n  enabled: true\n  host: \"0.0.0.0\"\n  port: 15260\n\n\n# manage bot ownership\nowners:\n  # if enabled and the application is under a team, all team members will be considered as owners\n  team-members-are-owners: true\n\n  # a list of IDs that must be considered owners in addition to the application/team owner\n  co-owners:\n</code></pre> <p>Now we should be ready for the next part.</p>"},{"location":"selfhosting/installation/installing-ballsdex/#6-run-the-bot","title":"6. Run the bot","text":"<p>To start the bot, simply run <code>docker compose up</code>. This will both start the bot and the admin panel, while showing you the live logs. Wait until the line \"Ballsdex bot is now ready\" shows up, and the bot should be online!</p> <p>To shut down the bot, use Ctrl+C.</p>"},{"location":"selfhosting/installation/installing-ballsdex/#detached-mode","title":"Detached mode","text":"<p>You will notice that the command above blocks your terminal. You can also run the bot in detached mode with <code>docker compose up -d</code> which allows you to keep using the terminal afterwards.</p> <p>In this mode, you can use <code>docker compose logs -f</code> to view the live logs (Ctrl+C to exit). You can also specify containers to filter which logs you want to see, like <code>docker compose logs -f bot</code> or <code>docker compose logs -f admin-panel</code>.</p> <p>To shut down the bot in this mode, run <code>docker compose down</code>.</p>"},{"location":"selfhosting/installation/installing-ballsdex/#7-updating-the-bot","title":"7. Updating the bot","text":"<ol> <li>Run <code>git pull</code> and wait for the changes to be pulled.</li> <li>If you encounter an error, which may happen when you're editing the source files, run <code>git reset --hard HEAD</code> to reset all changes done, then run <code>git pull</code> again. Note that it will reset any changes you may have.</li> <li>Fully shut down the bot with <code>docker compose down</code> (even if you used Ctrl+C before!)</li> <li>Rebuild the bot with <code>docker compose build</code></li> <li>Start again with <code>docker compose up</code> (or <code>docker compose up -d</code> in detached)</li> <li>Verify that no error happens while the bot starts!</li> </ol> <p>Even if your bot is online, there are no countryballs yet, they need to be added through the administration panel, your tool to control the bot's content.</p> <p>The next step of this tutorial is here</p>"},{"location":"selfhosting/misc/backup-and-transfers/","title":"Backup and transfers","text":"<p>There are 4 places where data unique to your bot is stored:</p> <ul> <li><code>config.yml</code> contains your basic settings</li> <li><code>admin_panel/media</code> contains all the assets you have uploaded through the admin panel</li> <li>All data is stored in a PostgreSQL database</li> <li>Automatic backups of the database are available in <code>pgbackups</code></li> </ul>"},{"location":"selfhosting/misc/backup-and-transfers/#manual-backupstransfers","title":"Manual backups/transfers","text":"<p>This is if you want to proceed to a complete backup of everything, or transfer your bot to a different machine.</p> <p>First, make sure your bot is fully turned off. Do <code>docker compose down</code> if you're running Docker.</p> <ul> <li>The <code>config.yml</code> can simply be copied. Be careful not to share it as it contains your bot token!</li> <li>Same for <code>admin_panel/media</code>, you can create a zip archive with all its contents</li> <li>You can also transfer <code>pgbackups</code> if you wish to preserve backups too.</li> </ul> <p>Then you must make a dump of the database.</p>"},{"location":"selfhosting/misc/backup-and-transfers/#creating-a-database-dump","title":"Creating a database dump","text":"With DockerWithout Docker <pre><code>docker compose up -d postgres-db &amp;&amp; \\\n    docker compose exec pg_dump -U ballsdex ballsdex -f data-dump.sql &amp;&amp; \\\n    docker compose cp postgres-db:data-dump.sql .\n</code></pre> <pre><code>pg_dump -U ballsdex ballsdex -f data-dump.sql\n</code></pre> <p>This will generate a file <code>data-dump.sql</code> which you need to preserve, containing all the data.</p>"},{"location":"selfhosting/misc/backup-and-transfers/#importing-a-database-dump","title":"Importing a database dump","text":"With DockerWithout Docker <pre><code>docker compose up -d postgres-db &amp;&amp; \\\n    cat data-dump.sql | \\\n    docker compose exec -T postgres-db psql -U ballsdex ballsdex\n</code></pre> <pre><code>psql -U ballsdex ballsdex -f data-dump.sql\n</code></pre> <p>This will print a lot of lines such as <code>INSERT</code> or <code>ALTER TABLE</code>. Check the logs to ensure no errors were produced.</p> <p>Warning</p> <p>This only works if the database is completely empty!</p> <p>If you messed up and wish to reset the database to redo the import, follow this.</p>"},{"location":"selfhosting/misc/backup-and-transfers/#restoring-a-backup","title":"Restoring a backup","text":"<p>If you accidentally deleted something important, or your database became corrupted, you can restore a backup. They are located in the <code>pgbackups</code> folder.</p> <p>First, you must wipe the database. Then, locate the backup file you want to use (we will assume it's named <code>ballsdex-latest.sql.gz</code> and follow the instructions according to your OS.</p>"},{"location":"selfhosting/misc/backup-and-transfers/#macoslinux","title":"macOS/Linux","text":"With DockerWithout Docker <pre><code>docker compose up -d postgres-db &amp;&amp; \\\n    zcat ballsdex-latest.sql.gz | \\\n    docker compose exec -T postgres-db psql -U ballsdex ballsdex\n</code></pre> <pre><code>zcat ballsdex-latest.sql.gz | psql -U ballsdex ballsdex\n</code></pre>"},{"location":"selfhosting/misc/backup-and-transfers/#windows","title":"Windows","text":"<p>Open the <code>ballsdex-latest.sql.gz</code> using 7zip and extract the resulting <code>.sql</code> file. Move it to your bot's folder, then:</p> With DockerWithout Docker <pre><code>docker compose up -d postgres-db &amp;&amp; \\\n    cat data-dump.sql | \\\n    docker compose exec -T postgres-db psql -U ballsdex ballsdex\n</code></pre> <pre><code>psql -U ballsdex ballsdex -f data-dump.sql\n</code></pre>"},{"location":"selfhosting/misc/backup-and-transfers/#wiping-the-database","title":"Wiping the database","text":"<p>If you need to reset the PostgreSQL database (importing data, restoring a backup), do this:</p> With DockerWithout Docker <pre><code>docker compose down --volumes\n</code></pre> <pre><code>psql -U ballsdex ballsdex -c \"DROP SCHEMA public CASCADE; CREATE SCHEMA public;\"\n</code></pre> <p>Danger</p> <p>This is irreversible, be extra sure that your backups are there!</p>"},{"location":"selfhosting/misc/migrating-windows-wsl/","title":"Migrating to WSL (Windows)","text":"<p>As Docker for Windows has a LOT of errors that are hardly fixable, it is now discouraged to host Ballsdex on Windows. The recommended way is to host on Linux, which is possible on Windows with WSL.</p> <p>This guide will show how to migrate your bot to WSL and ditch Docker for Windows.</p>"},{"location":"selfhosting/misc/migrating-windows-wsl/#1-backup-and-uninstall","title":"1. Backup and uninstall","text":"<p>Follow this guide to backup your data. In theory, you only need the <code>data-dump.sql</code> file, but better be safe.</p> <p>Once this step is complete and you have verified the contents of your database dump, uninstall Docker Desktop from Windows. You must still keep the bot's folder.</p> <p>Tip</p> <p>WSL can use more disk space. If you have less than 30GB available, it is a good idea to clean your computer now.</p>"},{"location":"selfhosting/misc/migrating-windows-wsl/#2-configure-wsl","title":"2. Configure WSL","text":"<p>Follow the first part of the new tutorial to install WSL and Docker. Don't forget the last step to test and confirm that your new Docker works.</p>"},{"location":"selfhosting/misc/migrating-windows-wsl/#3-locate-the-bots-folder","title":"3. Locate the bot's folder","text":"<p>You don't need to clone the bot again, WSL is able to access your Windows files.</p> <p>Open your BallsDex-DiscordBot folder in the file explorer, then in the explorer bar (top left), click and write <code>wsl</code> (instead of <code>cmd</code> or <code>powershell</code> this time). This will open a terminal inside WSL, where your files are accessible.</p> <p>Every time you need to type shell commands for the bot, you need to do the step above.</p>"},{"location":"selfhosting/misc/migrating-windows-wsl/#4-import-your-database-dump","title":"4. Import your database dump","text":"<p>Warning</p> <p>Do NOT start the bot yet! It will mess everything up by re-creating an empty database</p> <ol> <li>Type <code>docker compose up -d postgres-db</code> to only start the database and nothing else.</li> <li>Run <code>cat data-dump.sql | docker compose exec -T psql -U ballsdex ballsdex</code></li> <li>This will print a lot of lines such as <code>INSERT</code> or <code>ALTER TABLE</code>. Check the logs to ensure no errors were produced before continuing.</li> </ol>"},{"location":"selfhosting/misc/migrating-windows-wsl/#5-build-and-start-the-bot","title":"5. Build and start the bot","text":"<p>Run <code>docker compose build</code> to build the image.</p> <p>Then follow this section to start your bot. You shouldn't need any configuration, the bot will pick up your old files and resume just like before.</p>"},{"location":"selfhosting/misc/migrating-windows-wsl/#6-using-docker-on-linux","title":"6. Using Docker on Linux","text":"<p>There is no more Docker Destkop to view your containers, everything goes through the command line, so have the following reminder:</p> <ul> <li>Start your bot: <code>docker compose up -d</code></li> <li>Stop your bot: <code>docker compose down</code></li> <li>Check if your bot is running: <code>docker compose ps</code> (look for a line that says <code>ballsdex-discordbot-bot-1</code>)</li> <li>View logs: <code>docker compose logs</code></li> <li>View logs from the bot only: <code>docker compose logs bot</code></li> <li>View logs from the admin panel: <code>docker compose logs admin-panel</code></li> <li>View live logs from the bot: <code>docker compose logs bot -f</code> (press Ctrl+C to exit)</li> <li>Quick restart the bot: <code>docker compose restart bot</code> (useful after changing config, do not do this after updates)</li> </ul>"},{"location":"selfhosting/misc/rarity-mechanism/","title":"How rarity works","text":"<p>Rarity works differently for ball spawning and specials, but in general a higher number means more likely to happen, and 0 means disabled. Negative numbers are undefined behavior.</p>"},{"location":"selfhosting/misc/rarity-mechanism/#countryball-spawning-rarity","title":"Countryball spawning rarity","text":"<p>The ball rarity is independent from the spawn algorithm's logic, meaning that a ball will spawn when it has to, even if you only have balls with a rarity of 0.00001. In reality, the rarity depends on the other balls you have in your bot. To better illustrate how this work, look at the different situations:</p>"},{"location":"selfhosting/misc/rarity-mechanism/#with-one-countryball","title":"With one countryball","text":"<p>When you have a single countryball with a rarity higher than 0, then no matter what that rarity is, it will always spawn. </p>"},{"location":"selfhosting/misc/rarity-mechanism/#with-two-countryballs","title":"With two countryballs","text":"<p>Now let's add Germany with a rarity of 0.4: </p> <p>Germany has 2/3 chances of spawning, and France has 1/3 chance of spawning. What's interesting is that you will have the exact same result if you change the numbers proportionally: </p> <p>I doubled the rarity of both countries, yet they still exactly have the same odds of spawning. At this point you're starting to get how this works. The general probability for a countryball is this: $$ P = \\dfrac{\\text{ball rarity}}{\\sum\\text{rarities}} $$</p>"},{"location":"selfhosting/misc/rarity-mechanism/#with-more-countryballs","title":"With more countryballs","text":"<p>Finally, let's add Italy with a rarity of 0.2: </p> <p>Italy now can spawn, but in reality, it decreased Germany and France's probability of spawning to 4/7 and 3/7 respectively, Italy taking that final 1/7.</p>"},{"location":"selfhosting/misc/rarity-mechanism/#special-rarity","title":"Special rarity","text":"<p>Specials are a bit similar to the system above</p> <p>Warning</p> <p>Unlike countryballs that allow any rarity above 0, it is important that specials have a rarity between 0 and 1. Going outside this range will most likely result in strange behavior.</p> <p>Special rarity has changed as of 2.27.0, and is now simpler than it was before.</p> <p>Set each special rarity to the rarity that you want it to have. Eg, if you want a special to have a 20% chance of spawning, set its rarity to 0.2. If you want it to have a 1% chance of spawning, set its rarity to 0.01.</p> <p>If the special rarities sum to 1 or over 1, then commons will not spawn. Also, rarities will be \"squashed\" down to 100%, so if you have a Special A with a rarity set as 2, and Special B set as 3, then Special A will have a 2/5 chance of spawning (40%), Special B will have a 60% chance of spawning (60%), and commons will have a 0% chance of spawning (since the rarities sum to over one)</p>"}]}